[{"title":"探寻 webpack 插件机制","url":"%2Fposts%2F8a8c13a7%2F","content":"\n![](http://oqhtscus0.bkt.clouddn.com/1b98cd5742c64a67d9bd49b4ea1ed206.jpg-muyy)\n\nwebpack 可谓是让人欣喜又让人忧，功能强大但需要一定的学习成本。在探寻 webpack 插件机制前，首先需要了解一件有意思的事情，webpack 插件机制是整个 webpack 工具的骨架，而 webpack 本身也是利用这套插件机制构建出来的。因此在深入认识 webpack 插件机制后，再来进行项目的相关优化，想必会大有裨益。\n\n<!--more-->\n\n### webpack 插件\n\n先来瞅瞅 webpack 插件在项目中的运用\n\n```js\nconst MyPlugin = require('myplugin')\nconst webpack = require('webpack')\n\nwebpack({\n  ...,\n  plugins: [new MyPlugin()]\n  ...,\n})\n```\n\n那么符合什么样的条件能作为 webpack 插件呢？一般来说，webpack 插件有以下特点：\n\n1. 独立的 JS 模块，暴露相应的函数\n\n2. 函数原型上的 apply 方法会注入 compiler 对象\n\n3. compiler 对象上挂载了相应的 webpack 事件钩子\n\n4. 事件钩子的回调函数里能拿到编译后的 compilation 对象，如果是异步钩子还能拿到相应的 callback\n\n下面结合代码来看看：\n\n```js\nfunction MyPlugin(options) {}\n// 2.函数原型上的 apply 方法会注入 compiler 对象\nMyPlugin.prototype.apply = function(compiler) {\n  // 3.compiler 对象上挂载了相应的 webpack 事件钩子 4.事件钩子的回调函数里能拿到编译后的 compilation 对象\n  compiler.plugin('emit', (compilation, callback) => {\n    ...\n  })\n}\n// 1.独立的 JS 模块，暴露相应的函数\nmodule.exports = MyPlugin\n```\n\n这样子，webpack 插件的基本轮廓就勾勒出来了，此时疑问点有几点，\n\n1. 疑问 1：函数的原型上为什么要定义 apply 方法？阅读[源码](https://github.com/webpack/webpack/blob/10282ea20648b465caec6448849f24fc34e1ba3e/lib/webpack.js#L35)后发现源码中是通过 `plugin.apply()` 调用插件的。\n\n```js\nconst webpack = (options, callback) => {\n  ...\n  for (const plugin of options.plugins) {\n    plugin.apply(compiler);\n  }\n  ...\n}\n```\n\n2. 疑问 2：compiler 对象是什么呢？\n\n3. 疑问 3：compiler 对象上的事件钩子是怎样的？\n\n4. 疑问 4：事件钩子的回调函数里能拿到的 compilation 对象又是什么呢？\n\n这些疑问也是本文的线索，让我们一个个探索。\n\n### compiler 对象\n\ncompiler 即 webpack 的编辑器对象，在调用 webpack 时，会自动初始化 compiler 对象，[源码](https://github.com/webpack/webpack/blob/10282ea20648b465caec6448849f24fc34e1ba3e/lib/webpack.js#L30)如下：\n\n```js\n// webpack/lib/webpack.js\nconst Compiler = require(\"./Compiler\")\n\nconst webpack = (options, callback) => {\n  ...\n  options = new WebpackOptionsDefaulter().process(options) // 初始化 webpack 各配置参数\n  let compiler = new Compiler(options.context)             // 初始化 compiler 对象，这里 options.context 为 process.cwd()\n  compiler.options = options                               // 往 compiler 添加初始化参数\n  new NodeEnvironmentPlugin().apply(compiler)              // 往 compiler 添加 Node 环境相关方法\n  for (const plugin of options.plugins) {\n    plugin.apply(compiler);\n  }\n  ...\n}\n```\n\n终上，compiler 对象中包含了所有 webpack 可配置的内容，开发插件时，我们可以从 compiler 对象中拿到所有和 webpack 主环境相关的内容。\n\n### compilation 对象\n\ncompilation 对象代表了一次单一的版本构建和生成资源。当运行 webpack 时，每当检测到一个文件变化，一次新的编译将被创建，从而生成一组新的编译资源。一个编译对象表现了当前的模块资源、编译生成资源、变化的文件、以及被跟踪依赖的状态信息。\n\n结合源码来理解下上面这段话，首先 webpack 在每次执行时会调用 `compiler.run()` [(源码位置)](https://github.com/webpack/webpack/blob/e7c8fa414b718ac98d94a96e2553faceabfbc92f/lib/webpack.js#L58)，接着追踪 [onCompiled 函数](https://github.com/webpack/webpack/blob/3a5fda909f2ecf911c73429cb4770948dbd31d24/lib/Compiler.js#L163)传入的 compilation 参数，可以发现 compilation 来自构造函数 Compilation。\n\n```js\n// webpack/lib/Compiler.js\nconst Compilation = require(\"./Compilation\");\n\nnewCompilation(params) {\n  const compilation = new Compilation(this);\n  ...\n  return compilation;\n}\n```\n\n### 不得不提的 tapable 库\n\n再介绍完 compiler 对象和 compilation 对象后，不得不提的是 [tapable](https://github.com/webpack/tapable) 这个库，这个库暴露了所有和事件相关的 pub/sub 的方法。而且函数 [Compiler](https://github.com/webpack/webpack/blob/e7c8fa414b718ac98d94a96e2553faceabfbc92f/lib/Compiler.js#L29) 以及函数 [Compilation](https://github.com/webpack/webpack/blob/e7c8fa414b718ac98d94a96e2553faceabfbc92f/lib/Compilation.js#L98) 都继承自 Tapable。\n\n### 事件钩子\n\n事件钩子其实就是类似 MVVM 框架的生命周期函数，在特定阶段能做特殊的逻辑处理。了解一些常见的事件钩子是写 webpack 插件的前置条件，下面列举些常见的事件钩子以及作用：\n\n| 钩子 | 作用 | 参数 | 类型 |\n| :-: | :-: | :-: | :-: |\n| after-plugins | 设置完一组初始化插件之后 | compiler | sync |\n| after-resolvers | 设置完 resolvers 之后 | compiler | sync |\n| run | 在读取记录之前 | compiler | async |\n| compile | 在创建新 compilation 之前 | compilationParams | sync |\n| compilation | compilation 创建完成 | compilation | sync |\n| emit | 在生成资源并输出到目录之前 | compilation | async |\n| after-emit | 在生成资源并输出到目录之后 | compilation | async |\n| done | 完成编译 | stats | sync |\n\n完整地请参阅[官方文档手册](https://doc.webpack-china.org/api/compiler/#%E4%BA%8B%E4%BB%B6%E9%92%A9%E5%AD%90)，同时浏览[相关源码](https://github.com/webpack/webpack/blob/eca7bad8de54c39b9cb8b138793362b8a17ac11b/lib/Compiler.js#L32) 也能比较清晰地看到各个事件钩子的定义。\n\n### 插件流程浅析\n\n拿 emit 钩子为例，下面分析下插件调用源码：\n\n```js\ncompiler.plugin('emit', (compilation, callback) => {\n  // 在生成资源并输出到目录之前完成某些逻辑\n})\n```\n\n此处调用的 plugin 函数源自上文提到的 tapable 库，其最终调用栈指向了 hook.tapAsync()，其作用类似于 EventEmitter 的 on，[源码](https://github.com/webpack/tapable/blob/42b520760e138c23e7808881cb4322557e878307/lib/Tapable.js#L35)如下：\n\n```js\n// Tapable.js\noptions => {\n  ...\n  if(hook !== undefined) {\n    const tapOpt = {\n      name: options.fn.name || \"unnamed compat plugin\",\n      stage: options.stage || 0\n    };\n    if(options.async)\n      hook.tapAsync(tapOpt, options.fn); // 将插件中异步钩子的回调函数注入\n    else\n      hook.tap(tapOpt, options.fn);\n    return true;\n  }\n};\n```\n\n有注入必有触发的地方，源码中通过 callAsync 方法触发之前注入的异步事件，callAsync 类似 EventEmitter 的 emit，[相关源码](https://github.com/webpack/webpack/blob/e7c8fa414b718ac98d94a96e2553faceabfbc92f/lib/Compiler.js#L307)如下：\n\n```js\nthis.hooks.emit.callAsync(compilation, err => {\n\tif (err) return callback(err);\n\toutputPath = compilation.getPath(this.outputPath);\n\tthis.outputFileSystem.mkdirp(outputPath, emitFiles);\n});\n```\n\n一些深入细节这里就不展开了，说下关于阅读比较大型项目的源码的两点体会，\n\n* 要抓住一条主线索去读，忽视细节。否则会浪费很多时间而且会有挫败感；\n\n* 结合调试工具来分析，很多点不用调试工具的话很容易顾此失彼；\n\n### 动手实现个 webpack 插件\n\n结合上述知识点的分析，不难写出自己的 webpack 插件，关键在于想法。为了统计项目中 webpack 各包的有效使用情况，在 fork [webpack-visualizer](https://github.com/chrisbateman/webpack-visualizer) 的基础上对代码升级了一番，[项目地址](https://github.com/MuYunyun/analyze-webpack-plugin)。效果如下：\n\n![](http://oqhtscus0.bkt.clouddn.com/329ec042a73aecd0a1947bdcc1f0dcb4.jpg-400)\n\n插件核心代码正是基于上文提到的 emit 钩子，以及 compiler 和 compilation 对象。代码如下：\n\n```js\nclass AnalyzeWebpackPlugin {\n  constructor(opts = { filename: 'analyze.html' }) {\n    this.opts = opts\n  }\n\n  apply(compiler) {\n    const self = this\n    compiler.plugin(\"emit\", function (compilation, callback) {\n      let stats = compilation.getStats().toJson({ chunkModules: true }) // 获取各个模块的状态\n      let stringifiedStats = JSON.stringify(stats)\n      // 服务端渲染\n      let html = `<!doctype html>\n          <meta charset=\"UTF-8\">\n          <title>AnalyzeWebpackPlugin</title>\n          <style>${cssString}</style>\n          <div id=\"App\"></div>\n          <script>window.stats = ${stringifiedStats};</script>\n          <script>${jsString}</script>\n      `\n      compilation.assets[`${self.opts.filename}`] = { // 生成文件路径\n        source: () => html,\n        size: () => html.length\n      }\n      callback()\n    })\n  }\n}\n```\n\n### 参考资料\n\n[看清楚真正的 Webpack 插件\n](https://zoumiaojiang.com/article/what-is-real-webpack-plugin/#compiler)\n\n[webpack 官网](https://doc.webpack-china.org/)","tags":["webpack"],"categories":["webpack"]},{"title":"JS 装饰器解析","url":"%2Fposts%2Fb7045d95%2F","content":"\n![](http://oqhtscus0.bkt.clouddn.com/b8c937cfafeecc6ae8d6278753ac645d.jpg-muyy)\n\n随着 ES6 和 TypeScript 中类的引入，在某些场景需要在不改变原有类和类属性的基础上扩展些功能，这也是装饰器出现的原因。\n\n<!--more-->\n\n### 装饰器简介\n\n作为一种可以动态增删功能模块的模式(比如 [redux 的中间件机制](https://github.com/MuYunyun/blog/issues/15))，装饰器同样具有很强的动态灵活性，只需在类或类属性之前加上 `@方法名` 就完成了相应的类或类方法功能的变化。\n\n不过装饰器模式仍处于[第 2 阶段提案中](https://github.com/tc39/proposal-decorators)，使用它之前需要使用 babel 模块 `transform-decorators-legacy` 编译成 ES5 或 ES6。\n\n在 TypeScript 的 [lib.es5.d.ts](https://github.com/Microsoft/TypeScript/blob/c48662c891ce810f5627a0f6a8594049cccceeb5/lib/lib.es5.d.ts#L1291) 中，定义了 4 种不同装饰器的接口，其中装饰类以及装饰类方法的接口定义如下所示：\n\n```ts\ndeclare type ClassDecorator = <TFunction extends Function>(target: TFunction) => TFunction | void;\ndeclare type MethodDecorator = <T>(target: Object, propertyKey: string | symbol, descriptor: TypedPropertyDescriptor<T>) => TypedPropertyDescriptor<T> | void;\n```\n\n下面对这两种情况进行解析。\n\n### 作用于类的装饰器\n\n当装饰的对象是类时，我们操作的就是这个`类本身`。\n\n```js\n@log\nclass MyClass { }\n\nfunction log(target) { // 这个 target 在这里就是 MyClass 这个类\n   target.prototype.logger = () => `${target.name} 被调用`\n}\n\nconst test = new MyClass()\ntest.logger() // MyClass 被调用\n```\n\n由于装饰器是表达式，我们也可以在装饰器后面再添加提个参数：\n\n```js\n@log('hi')\nclass MyClass { }\n\nfunction log(text) {\n  return function(target) {\n    target.prototype.logger = () => `${text}，${target.name} 被调用`\n  }\n}\n\nconst test = new MyClass()\ntest.logger() // hello，MyClass 被调用\n```\n\n在使用 redux 中，我们最常使用 react-redux 的写法如下：\n\n```js\n@connect(mapStateToProps, mapDispatchToProps)\nexport default class MyComponent extends React.Component {}\n```\n\n经过上述分析，我们知道了上述写法等价于下面这种写法：\n\n```js\nclass MyComponent extends React.Component {}\nexport default connect(mapStateToProps, mapDispatchToProps)(MyComponent)\n```\n\n### 作用于类方法的装饰器\n\n与装饰类不同，对类方法的装饰本质是操作其描述符。可以把此时的装饰器理解成是 `Object.defineProperty(obj, prop, descriptor)` 的语法糖，看如下代码：\n\n```js\nclass C {\n  @readonly(false)\n  method() { console.log('cat') }\n}\n\nfunction readonly(value) {\n  return function (target, key, descriptor) { // 此处 target 为 C.prototype; key 为 method;\n    // 原 descriptor 为：{ value: f, enumarable: false, writable: true, configurable: true }\n    descriptor.writable = value\n    return descriptor\n  }\n}\n\nconst c = new C()\nc.method = () => console.log('dog')\n\nc.method() // cat\n```\n\n可以看到装饰器函数接收的三个参数与 Object.defineProperty 是完全一样的，具体实现可以看 babel 转化后的代码，主要实现如下所示：\n\n```js\nvar C = (function() {\n  class C {\n    method() { console.log('cat') }\n  }\n\n  var temp\n  temp = readonly(false)(C.prototype, 'method',\n    temp = Object.getOwnPropertyDescriptor(C.prototype, 'method')) || temp // 通过 Object.getOwnPropertyDescriptor 获取到描述符传入到装饰器函数中\n\n  if (temp) Object.defineProperty(C.prototype, 'method', temp)\n  return C\n})()\n```\n\n再将再来看看如果有多个装饰器作用于同一个方法上呢？\n\n```js\nclass C {\n  @readonly(false)\n  @log\n  method() { }\n}\n```\n\n经 babel 转化后的代码如下：\n\n```js\ndesc = [readonly(false), log]\n    .slice()\n    .reverse()\n    .reduce(function(desc, decorator) {\n      return decorator(target, property, desc) || desc;\n    }, desc);\n```\n\n可以清晰地看出，经过 reverse 倒序后，装饰器方法会至里向外执行。\n\n### 相关链接\n\n[javascript-decorators](https://github.com/wycats/javascript-decorators)\n[Javascript 中的装饰器](https://aotu.io/notes/2016/10/24/decorator/index.html)\n[JS 装饰器（Decorator）场景实战](https://juejin.im/post/59f1c484f265da431c6f8940)\n[修饰器](http://es6.ruanyifeng.com/#docs/decorator#%E6%96%B9%E6%B3%95%E7%9A%84%E4%BF%AE%E9%A5%B0)\n[Babel](http://babeljs.io)\n","tags":["ES7"],"categories":["decorators"]},{"title":"redux middleware 源码分析","url":"%2Fposts%2F7f9a92dc%2F","content":"\n![](http://oqhtscus0.bkt.clouddn.com/39bbe72c55363dedf1f69673a58e01cb.jpg-muyy)\n\n<!--more-->\n\n### middleware 的由来\n\n在业务中需要打印每一个 action 信息来调试，又或者希望 dispatch 或 reducer 拥有异步请求的功能。面对这些场景时，一个个修改 dispatch 或 reducer 代码有些乏力，我们需要一个可组合的、自由增减的插件机制，Redux 借鉴了 Koa 中 middleware 的思想，利用它我们可以在前端应用中便捷地实现如日志打印、异步请求等功能。\n\n![](http://oqhtscus0.bkt.clouddn.com/4ab33429ea461ba24367cc062039836c.jpg-200)\n\n比如在[项目](https://github.com/MuYunyun/reactSPA/blob/274c00870853638fb0f77df8497f911eb560b617/src/client/store/configureStore.dev.js#L14)中，进行了如下调用后，redux 就集成了 thunk 函数调用以及打印日志的功能。\n\n```js\nimport thunk from 'redux-thunk'\nimport logger from '../middleware/logger'\nconst enhancer = applyMiddleware(thunk, logger),  // 以 redux-thunk、logger 中间件为例介绍中间件的使用\nconst store = createStore(rootReducer, enhancer)\n```\n\n下面追本溯源，来分析下源码。\n\n### applyMiddleware 调用入口\n\n```js\nexport default function createStore(reducer, preloadedState, enhancer) {\n  // 通过下面代码可以发现，如果 createStore 传入 2 个参数，第二个参数相当于就是 enhancer\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = preloadedState\n    preloadedState = undefined\n  }\n  if (typeof enhancer !== 'undefined') {\n    return enhancer(createStore)(reducer, preloadedState)\n  }\n  ...\n}\n```\n\n由上述 [createStore 源码](https://github.com/reactjs/redux/blob/55e77e88c98723f1883929458bb0144430108143/src/createStore.js#L33)发现，applyMiddleware 会进行 `applyMiddleware(thunk, logger)(createStore)(reducer, preloadedState)` 的调用。\n\n[applyMiddleware 源码](https://github.com/reactjs/redux/blob/55e77e88c98723f1883929458bb0144430108143/src/applyMiddleware.js#L20)如下\n\n```js\nexport default function applyMiddleware(...middlewares) {\n  return createStore => (...args) => {\n    const store = createStore(...args)\n    let dispatch = store.dispatch\n    let chain = []\n\n    const middlewareAPI = {\n      getState: store.getState,                // 调用 redux 原生方法，获取状态\n      dispatch: (...args) => dispatch(...args) // 调用 redux 原生 dispatch 方法\n    }\n    // 串行 middleware\n    chain = middlewares.map(middleware => middleware(middlewareAPI))\n    dispatch = compose(...chain)(store.dispatch)\n\n    return {\n      ...store,\n      dispatch // 返回加工过的 dispatch\n    }\n  }\n}\n```\n\n可以发现 applyMiddleware 的作用其实就是返回加工过的 dispatch，下面会着重分析 middlewares 是如何串行起来的以及 dispatch 是如何被加工的。\n\n### 串行 middleware\n\n```js\nconst middlewareAPI = {\n  getState: store.getState,\n  dispatch: (...args) => dispatch(...args)\n}\nchain = middlewares.map(middleware => middleware(middlewareAPI))\ndispatch = compose(...chain)(store.dispatch)\n```\n\n观察上述代码后发现每个 middleware 都会传入参数 middlewareAPI，来看下中间件 [logger 的源码](https://github.com/MuYunyun/reactSPA/blob/274c00870853638fb0f77df8497f911eb560b617/src/client/middleware/logger.js#L1) 以及 [redux-thunk 的源码](https://github.com/gaearon/redux-thunk/blob/master/src/index.js), 发现中间件接受的第一个参数正是 ({ dispatch, getState })\n\n```js\n// logger 源码\nexport default ({ dispatch, getState }) => next => action => {\n  console.log(action)\n  return next(action) // 经 compose 源码分析，此处 next 为 Store.dispatch\n}\n```\n\n```js\n// redux-thunk 源码\nexport default ({ dispatch, getState }) => next => action => {\n  if (typeof action === 'function') {\n    return action(dispatch)\n  }\n  return next(action) // 此处 next 为 logger 中间件返回的 (action） => {} 函数\n}\n```\n\n### dispatch 是如何被加工的\n\n接着上个小节，在 `dispatch = compose(...chain)(store.dispatch)` 中发现了 compose 函数，来看下 [compose 的源码](https://github.com/reactjs/redux/blob/55e77e88c98723f1883929458bb0144430108143/src/compose.js#L12)\n\n```js\nexport default function compose(...funcs) {\n  // ...\n  return funcs.reduce((a, b) => (...args) => a(b(...args)))\n}\n```\n\ncompose 源码中的 `funcs.reduce((a, b) => (...args) => a(b(...args)))` 算是比较重要的一句，它的作用是返回组合参数后的函数，比如 compose(f, g, h) 等价于 (...args) => f(g(h(...args)))，效果图如下所示，调用 this.props.dispatch() 后，会调用相应的中间件，最终会调用 redux 原生的 store.dispatch()，并且可以看到中间件调用的形式类似数据结构中的栈(先进后出)。\n\n![](http://oqhtscus0.bkt.clouddn.com/201a9431b32d9d9ac2ad5f6712206b3a.jpg-300)\n\n拿上个小节提到的 logger、redux-thunk 中间件为例，其 middleware 的内部串行调用方式如下，从而完成了 dispatch 功能的增强(支持如 `this.props.dispatch(func)` 的调用以及日志功能)。具体可以看 [项目中的运用](https://github.com/MuYunyun/reactSPA/blob/274c00870853638fb0f77df8497f911eb560b617/src/common/pages/music/index.js#L35)\n\n```js\naction => {\n  if (typeof action === 'function') {\n    return action(dispatch)\n  }\n  return (action => {\n    console.log(action)\n    return store.dispatch(action)\n  })(action)\n}\n```\n\n### 参考文献\n\n深入React技术栈","tags":["redux-thunk"],"categories":["redux"]},{"title":"探索从 MVC 到 MVVM + Flux 架构模式的转变","url":"%2Fposts%2Ff0f11de9%2F","content":"\n![](http://oqhtscus0.bkt.clouddn.com/77fcc2250cfde1b47300673eb3006c8c.jpg-muyy)\n\n在业务中一般 MVVM 框架一般都会配合上数据状态库(redux, mobx 等)一起使用，本文会通过一个小 demo 来讲述为什么会引人数据状态库。\n\n<!--more-->\n\n### 从 MVC 到 MVVM 模式说起\n\n传统 MVC 架构(如 JSP)在当今移动端流量寸土寸金的年代一个比较头疼的问题就是会进行大量的全局重复渲染。但是 MVC 架构是好东西，其对数据、视图、逻辑有了清晰的分工，于是前端 MVC 框架(比如 backbone.js) 出来了，对于很多业务规模不大的场景，前端 MVC 框架已经够用了，它也能做到前后端分离开发单页面应用，那么它的缺陷在哪呢？\n\n拿 backbone.js 说，它的 Model 对外暴露了 set 方法，也就是说可以在不止一个 View 里修改同个 Model 的数据，然后一个 Model 的数据同时对应多个 View 的呈现，如下图所示。当业务逻辑过多时，多个 Model 和多个 View 就会耦合到一块，可以想到排查 bug 的时候会比较痛苦。\n\n![](http://oqhtscus0.bkt.clouddn.com/779649b773473d622881577730d81be7.jpg-200)\n\n针对传统 MVC 架构性能低(多次全局渲染)以及前端 MVC 框架耦合度高(Model 和 View) 的痛处，MVVM 框架完美地解决了以上两点。可以参阅之前写的 [MVVM 框架解析之双向绑定](https://github.com/MuYunyun/blog/issues/11)\n\n### only MVVM\n\n假设有这么一个场景，在输入框中查询条件，点击查询，然后在列表中返回相应内容。如下图所示：\n\n![](http://oqhtscus0.bkt.clouddn.com/ecb63d73e997ebf901552c2a89a991c8.jpg-200)\n\n假设用 react 实现，思路大体是先调用查询接口，调用成功后将获取到的数据通过 `setState` 存进 list 中，列表显示部分代码如下：\n\n```js\nconst Decorate = (ListComponent) => class extends Component {\n  constructor() {\n    super()\n    this.state = { list: [] }\n  }\n\n  componentDidMount() {\n    fetch('./list.json')\n      .then((res) => res.json())\n      .then(result => this.setState({ list: result.data }))\n  }\n\n  render() {\n    return (\n      <ListComponent data={this.state.list} />\n    )\n  }\n}\n```\n\n接着往封装的 Decorate 组件里，传入无状态函数构建的 List 组件用来展示列表数据，代码如下：\n\n```js\nfunction List(props) {\n  return (\n    <div>\n      {props.data.map(r =>\n        <p key={r.id}>{r.content}</p>\n      )}\n    </div>\n  )\n}\n```\n\n可以看到 List 组件相当于是 View 层，而封装的 Decorate 组件相当于是 Model 层。但是这么做还是把业务逻辑写进了组件当中。而我们期望的是能得到一个纯粹的 Model 层和 View 层。接着一起看看 Flux 架构模式是如何解决这个问题的。\n\n### 引人 Flux 架构模式\n\n![](http://oqhtscus0.bkt.clouddn.com/77fcc2250cfde1b47300673eb3006c8c.jpg-200)\n\nFlux 架构模式的 4 个重要组成部分以及它们的关系如上图所示，下文会根据 dispatch，store, action, view 的顺序逐步揭开 Flux 架构模式的面纱。\n\n从 [Flux 的源码](https://github.com/facebook/flux/blob/master/src/Dispatcher.js)中可以看出 Dispacher.js 是其的核心文件，其核心是基于事件的发布/订阅模式完成的，核心源码如下：\n\n```js\nclass Dispatcher {\n  ...\n  // 注册回调函数，\n  register(callback) {\n    var id = _prefix + this._lastID++;\n    this._callbacks[id] = callback;\n  }\n\n  // 当调用 dispatch 的时候会调用 register 中注册的回调函数\n  dispatch(payload) {\n    this._startDispatching(payload);\n    for (var id in this._callbacks) {\n      this._invokeCallback(id);\n    }\n  }\n}\n```\n\n回顾下之前的目的：让 Store 层变得纯粹。于是定义了一个变量 comments 用来专门存放列表数据，在了解 Dispatcher 的核心原理之后，当调用 dispatch(obj) 方法时，就可以把参数传递到事先注册的 register 函数中，代码如下：\n\n```js\n// commentStore.js\nlet comments = []\nconst CommentStore = {\n  getComment() {\n    return comments\n  }\n}\n\ndispathcer.register((action) => { // 调用 Dispatcher 实例上的 register 函数\n  switch (action.type) {\n    case 'GET_LIST_SUCCESS': {\n      comments = action.comment\n    }\n  }\n})\n```\n\n以及 action 中的函数如下：\n\n```js\n// commentAction.js\nconst commentAction = {\n  getList() {\n    fetch('./list.json')\n      .then((res) => res.json())\n      .then(result =>\n        dispathcer.dispatch({ // 调用 Dispatcher 实例上的 dispatch 函数\n          type: 'GET_LIST_SUCCESS',\n          comment: result.data\n        }))\n  }\n}\n```\n\n但是似乎少了点什么，当 `GET_LIST_SUCCESS` 成功后，发现还缺少通知到页面再次调用 CommentStore.getComment() 的能力，所以再次引用事件发布/订阅模式，这次使用了 Node.js 提供的 events 模块，对 commentStore.js 文件进行修改，修改后代码如下：\n\n```js\nlet comments = []\nconst CommentStore = Object.assign({}, EventEmitter.prototype, {\n  getComment() {\n    return comments\n  },\n\n  emitChange() {\n    this.emit('change')\n  },\n\n  addListener(callback) { // 提供给页面组件使用\n    this.on('change', callback)\n  }\n})\n\nappDispathcer.register((action) => {\n  switch (action.type) {\n    case 'GET_LIST_SUCCESS': {\n      comments = action.comment\n      CommentStore.emitChange() // 有了这行代码，也就有了通知页面再次进行调用 CommentStore.getComment 的能力\n    }\n  }\n})\n```\n\n剩下最后一步了，就是整合 store 和 action 进页面中，代码如下:\n\n```js\nclass ComponentList extends Component {\n  constructor() {\n    super()\n    this.state = {\n      comment: commentStore.getComment()\n    }\n  }\n\n  componentDidMount() {\n    commentStore.addListener(() => this.setState({ // 注册函数，上面已经提过，供 store 使用\n      comment: commentStore.getComment()\n    }))\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.comment.map(r =>\n          <p key={r.id}>{r.content}</p>\n        )}\n      </div>\n    )\n  }\n}\n```\n\n### 小结\n\n单纯以 mvvm 构建应用会发现业务逻辑以及数据都耦合在组件之中，引入了 Flux 架构模式后数据和业务逻辑得到较好的分离。但是使用 Flux 有什么缺点呢？在下篇 《聊聊 Redux 架构模式》中会进行分析，下回见。\n\n本文实践案例已上传至 [stateManage](https://github.com/MuYunyun/stateManage)\n\n[系列博客](https://github.com/MuYunyun/blog)，欢迎 Star\n\n\n","tags":["react"],"categories":["框架"]},{"title":"跨域二三事","url":"%2Fposts%2Fe29f2c47%2F","content":"\n![](http://oqhtscus0.bkt.clouddn.com/62b89b89373dc86916a60efc28bdd15e.jpg-muyy)\n\n跨域是日常开发中经常开发中经常会接触到的一个重难点知识，何不总结实践一番，从此心中对之了无牵挂。\n\n<!--more-->\n\n### 同源策略\n\n之所以会出现跨域解决方案，是因为同源策略的限制。同源策略规定了如果两个 url 的协议、域名、端口中有任何一个不等，就认定它们跨源了。比如下列表格列出和 `http://127.0.0.1:3000` 比较的同源检测的结果，\n\n| url | 结果 | 原因 |\n| :-: | :-: | :-: |\n|http://127.0.0.1:3000/index|同源||\n|https://127.0.0.1:3000|跨源|协议不同|\n|https://localhost:3000|跨源|域名不同|\n|http://127.0.0.1:3001|跨源|端口不同|\n\n那跨源有什么后果呢？归纳有三：不能获取 Cookie、LocalStorage、IndexedDB；不能获取 dom 节点；不能进行一般的 Ajax 通信；跨域解决方案的出现就是为了解决以上痛处。\n\n### JSONP 跨域\n\n提到 JSONP 跨域，不得不先提到 `script` 标签，和 `img`、`iframe` 标签类似，这些标签是不受同源策略限制的，JSONP 的核心就是通过动态加载 script 标签来完成对目标 url 的请求。\n\n先来看一段 JSONP 调用的 `Headers` 部分，字段如下：\n\n```http\nRequest URL:http://127.0.0.1:3000/?callback=handleResponse\nRequest Method:GET\nStatus Code:200 OK\nRemote Address:127.0.0.1:3000\n```\n\n可以很鲜明地发现在 `Request URL` 中有一句 `?callback=handleResponse`，这个 callback 后面跟着的 handleResponse 即回调函数名（可以任意取），服务端会接收到这个参数然后拼接成形如 `handleResponse(JSON)` 的形式返还给前端(这也是 JSONP == JSON with padding 的原因吧)，如下图，这时候浏览器就会自动调用我们事先定义好的 handleResponse 函数。\n\n![](http://oqhtscus0.bkt.clouddn.com/3a484a1ca0fbb4be46fed582828c5847.jpg-200)\n\n前端代码示例：(源为 http://127.0.0.1:3001)\n\n```js\nfunction handleResponse(res) {\n  console.log(res) // {text: \"jsonp\"}\n}\n\nconst script = document.createElement('script')\nscript.src = 'http://127.0.0.1:3000?callback=handleResponse'\ndocument.head.appendChild(script)\n```\n\n服务端代码示例：(源为 http://127.0.0.1:3000)\n\n```js\nconst server = http.createServer((req, res) => {\n  if (~req.url.indexOf('?callback')) { // 简单处理 JSONP 跨域的时候\n    const obj = {\n      \"text\": 'jsonp',\n    }\n    const callback = req.url.split('callback=')[1]\n    const json = JSON.stringify(obj)\n    const build = callback + `(${json})`\n    res.end(build) // 这里返还给前端的是拼接好的 JSON 对象\n  }\n});\n```\n\n可以看出 JSONP 具有直接访问响应文本的优点，但是要想确认 JSONP 是否请求失败并不容易，因为 script 标签的 onerror 事件还未得到浏览器广泛的支持，此外它仅能支持 GET 方式调用。\n\n### CORS 跨域\n\nCORS(Cross-Origin Resource Sharing) 可以理解为加强版的 Ajax，也是目前主流的跨域解决方案。它的核心思想即`前端与后端进行 Ajax 通信时，通过自定义 HTTP 头部设置从而决定请求或响应是否生效`。\n\n比如前端代码(url 为 http://127.0.0.1:3001)写了段 Ajax，代码如下：\n\n```js\nconst xhr = new XMLHttpRequest()\nxhr.onreadystatechange = function () {\n  if (xhr.readyState === 4) {\n    if (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {\n      console.log('responseTesx:' + xhr.responseText)\n    }\n  }\n}\nxhr.open('get', 'http://127.0.0.1:3000', true)\nxhr.send()\n```\n\n因为端口不一致的关系这时候导致不同源了，这时候会在 Request Headers 中发现多了这么一行字段，\n\n```http\nOrigin: http://127.0.0.1:3001\n```\n\n而且控制台中会报出如下错误:\n\n```http\nFailed to load http://127.0.0.1:3000/: Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://127.0.0.1:3001' is therefore not allowed access.\n```\n\n这时候就需要在服务端设置字段 `Access-Control-Allow-Origin`，它的作用就是设置允许来自什么源的请求，如果值设置为 `*`，表明允许来自任意源的请求。服务端代码示例如下：\n\n```js\nhttp.createServer((req, res) => {\n  res.setHeader('Access-Control-Allow-Origin', 'http://127.0.0.1:3001') // 设置允许来自 http://127.0.0.1:3001 源的请求\n})\n```\n\nCORS 分为简单请求以及非简单请求。可以这么区分，如果请求方法为 `POST`、`GET`、`HEAD` 时为简单请求，其它方法如 `PUT`、`DELETE` 等为非简单请求，如果是非简单请求的话，可以在 chrome 的 Network 中看到多了一次 `Request Method` 为 `OPTIONS` 的请求。如下图:\n\n![](http://oqhtscus0.bkt.clouddn.com/f397ac2c565828f38516c8be2ebc1b4b.jpg-400)\n\n可以把这个请求称为预请求，用白话文翻译下，浏览器询问服务器，'服务器大哥，我这次要进行 PUT 请求，你给我发张通行证呗'，服务器大哥见浏览器小弟这么殷勤，于是给了它发了张通行证，叫作 `Access-Control-Allow-Methods:PUT`，接着浏览器就能愉快地进行 PUT 请求了。服务端代码示例如下：\n\n```js\nhttp.createServer((req, res) => {\n  res.setHeader('Access-Control-Allow-Origin', 'http://127.0.0.1:3001')\n  res.setHeader('Access-Control-Allow-Methods', 'http://127.0.0.1:3001')\n})\n```\n\n聊完简单请求和非简单请求的区别后，再来看看如何利用 CORS 实现 Cookie 的跨域传送，首先在服务器随意设置个 Cookie 值下发到浏览器，如果非跨域的情况下，浏览器再次请求服务器时就会带上服务器给的 Cookie，但是跨域的时候怎么办呢？不卖关子了，需在服务端设置 `Access-Control-Allow-Credentials` 字段以及在客户端设置 `withCredentials` 字段，两者缺一不可，代码如下：\n\n前端代码示例：(源为 http://127.0.0.1:3001)\n\n```js\nconst xhr = new XMLHttpRequest()\n...\nxhr.withCredentials = true // 传 cookie 的时候前端要做的\nxhr.open('get', 'http://127.0.0.1:3000', true)\nxhr.send()\n```\n\n服务端代码示例: (源为 http://127.0.0.1:3000)\n\n```js\nconst server = http.createServer((req, res) => {\n  res.setHeader('Access-Control-Allow-Origin', 'http://127.0.0.1:3001') // 必填：接受域的请求\n  res.setHeader('Set-Cookie', ['type=muyy']) // 下发 cookie\n  res.setHeader('Access-Control-Allow-Credentials', true) // ② 选填：是否允许浏览器传 cookie 到服务端，只能设置为 true\n  res.end('date from cors')\n})\n```\n\n至此介绍了几个比较关键 HTTP 头在 CORS 中的实践运用，更为详细的资料可以参阅 [Cross-Origin Resource Sharing](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)，最后概括下 CORS 的优缺点，优点是支持所有类型的 HTTP 方法，缺点是有些老的浏览器不支持 CORS。\n\n### hash + iframe\n\n在文章最开始提到过 iframe 标签也是不受同源策略限制的标签之一，hash + iframe 的跨域核心思想就是，在 A 源中通过动态改变 iframe 标签的 src 的哈希值，在 B 源中通过 `window.onhashchange` 来捕获到相应的哈希值。思路不难直接上代码：\n\nA 页面代码示例(源为 http://127.0.0.1:3000)\n\n```html\n<body>\n  <iframe src=\"http://127.0.0.1:3001\"></iframe>\n  <script>\n    const iframe = document.getElementsByTagName('iframe')[0]\n    iframe.setAttribute('style', 'display: none')\n    const obj = {\n      data: 'hash'\n    }\n    iframe.src = iframe.src + '#' + JSON.stringify(obj) // ① 关键语句\n  </script>\n</body>\n```\n\nB 页面代码示例(源为 http://127.0.0.1:3001)\n\n```js\nwindow.onhashchange = function() { // ① 关键语句\n  console.log('来自 page2 的代码 ' + window.location.hash) // 来自 page2 的代码 #{\"data\":\"hash\"}\n}\n```\n\n刷新 A 页面，可以发现在控制台打印了如下字段，至此实现了跨域。\n\n```js\n来自 page2 的代码 #{\"data\":\"hash\"}\n```\n\n这种方式进行跨域优点是支持页面和页面间的通信，缺点也是只支持 GET 方法和单向的跨域通信。\n\n### postMessage\n\n为了实现跨文档传送(cross-document messaging)，简称 XDM。HTML5 给出了一个 api —— postMessage，postMessage() 方法接收两个参数：`发送消息`以及`消息接收方所在域的字符串`。代码示例如下:\n\nA 页面代码示例(源为 http://127.0.0.1:3000)\n\n```html\n<body>\n  <iframe src=\"http://127.0.0.1:3001\"></iframe>\n  <script>\n    const iframe = document.getElementsByTagName('iframe')[0]\n    iframe.setAttribute('style', 'display: none')\n    iframe.onload = function() { // 此处要等 iframe 加载完毕，后续代码才会生效\n      iframe.contentWindow.postMessage('a secret', 'http://127.0.0.1:3001')\n    }\n  </script>\n</body>\n```\n\nB 页面代码示例(源为 http://127.0.0.1:3001)\n\n```js\nwindow.addEventListener('message', function(event) {\n  console.log('From page1 ' + event.data)\n  console.log('From page1 ' + event.origin)\n}, false)\n```\n\n刷新 A 页面，可以发现在控制台打印了如下字段，至此实现了跨域。\n\n```\nFrom page1 a secret\nFrom page1 http://127.0.0.1:3000\n```\n\n这种跨域方式优点是是支持页面和页面间的双向通信，缺点也是只能支持 GET 方法调用。\n\n### WebSockets\n\nWebSockets 属于 HTML5 的协议，它的目的是在一个持久连接上建立全双工通信。由于 WebSockets 采用了自定义协议，所以优点是客户端和服务端发送数据量少，缺点是要额外的服务器。基础的使用方法如下：\n\n```js\nconst ws = new WebSocket('ws://127.0.0.1:3000')\nws.onopen = function() {\n  // 连接成功建立\n}\n\nws.onmessage = function(event) {\n  // 处理数据\n}\n\nws.onerror = function() {\n  // 发生错误时触发，连接中断\n}\n\nws.onclose = function() {\n  // 连接关闭时触发\n}\n```\n\n当然一般我们会使用封装好 WebSockets 的第三方库 [socket.io](https://github.com/socketio/socket.io)，这里具体就不展开了。\n\n### 项目地址\n\n前文所述五种跨域实践的 demo 已上传至 [cross-domain](https://github.com/MuYunyun/cross-domain)，前端环境基于 create-react-app 搭建，后端环境用 node 搭建。\n\n当然跨域方式还有一些其他方式的实现，后续酌情慢慢填坑~\n\n\n","tags":["http"],"categories":["跨域"]},{"title":"原生 JS 实现一个瀑布流插件","url":"%2Fposts%2F16b9cce7%2F","content":"\n![](http://oqhtscus0.bkt.clouddn.com/74f00b858ebdc430e780aa1da6ca0ce1.jpg-muyy)\n\n瀑布流布局中的图片有一个核心特点 —— 等宽不定等高，瀑布流布局在国内外网站都有一定规模的使用，比如[pinterest](https://www.pinterest.com/)、[花瓣网](http://huaban.com/)等等。那么接下来就基于这个特点开始瀑布流探索之旅。\n\n<!-- more -->\n\n### 基础功能实现\n\n首先我们定义好一个有 20 张图片的容器，\n\n```html\n<body>\n  <style>\n    #waterfall {\n      position: relative;\n    }\n    .waterfall-box {\n      float: left;\n      width: 200px;\n    }\n  </style>\n</body>\n<div id=\"waterfall\">\n    <img src=\"images/1.png\" class=\"waterfall-box\">\n    <img src=\"images/2.png\" class=\"waterfall-box\">\n    <img src=\"images/3.png\" class=\"waterfall-box\">\n    <img src=\"images/4.png\" class=\"waterfall-box\">\n    <img src=\"images/5.png\" class=\"waterfall-box\">\n    <img src=\"images/6.png\" class=\"waterfall-box\">\n    ...\n  </div>\n```\n\n![](http://oqhtscus0.bkt.clouddn.com/88935550542f9cc012151460095d9579.jpg-300)\n\n由于未知的 css 知识点，丝袜最长的妹子把下面的空间都占用掉了。。。\n\n接着正文，假如如上图，每排有 5 列，那第 6 张图片应该出现前 5 张图片哪张的下面呢？当然是绝对定位到前 5 张图片高度最小的图片下方。\n\n那第 7 张图片呢？这时候把第 6 张图片和在它上面的图片当作是一个整体后，思路和上述是一致的。代码实现如下:\n\n```js\nWaterfall.prototype.init = function () {\n  ...\n  const perNum = this.getPerNum() // 获取每排图片数\n  const perList = []              // 存储第一列的各图片的高度\n  for (let i = 0; i < perNum; i++) {\n    perList.push(imgList[i].offsetHeight)\n  }\n\n  let pointer = this.getMinPointer(perList) // 求出当前最小高度的数组下标\n\n  for (let i = perNum; i < imgList.length; i++) {\n    imgList[i].style.position = 'absolute' // 核心语句\n    imgList[i].style.left = `${imgList[pointer].offsetLeft}px`\n    imgList[i].style.top = `${perList[pointer]}px`\n\n    perList[pointer] = perList[pointer] + imgList[i].offsetHeight // 数组最小的值加上相应图片的高度\n    pointer = this.getMinPointer(perList)\n  }\n}\n```\n\n细心的朋友也许发现了代码中获取图片的高度用到了 `offsetHeight` 这个属性，这个属性的高度之和等于`图片高度 + 内边距 + 边框`，正因为此，我们用了 padding 而不是 margin 来设置图片与图片之间的距离。此外除了`offsetHeight` 属性，此外还要理解 `offsetHeight`、`clientHeight`、`offsetTop`、`scrollTop` 等属性的区别，才能比较好的理解这个项目。css 代码简单如下：\n```css\n.waterfall-box {\n  float: left;\n  width: 200px;\n  padding-left: 10px;\n  padding-bottom: 10px;\n}\n```\n\n至此完成了瀑布流的基本布局，效果图如下：\n\n![](http://oqhtscus0.bkt.clouddn.com/74f00b858ebdc430e780aa1da6ca0ce1.jpg-300)\n\n### scroll、resize 事件监听的实现\n\n实现了初始化函数 init 以后，下一步就要实现对 scroll 滚动事件进行监听，从而实现当滚到父节点的底部有源源不断的图片被加载出来的效果。这时候要考虑一个点，是滚动到什么位置时触发加载函数呢？这个因人而异，我的做法是当满足 `父容器高度 + 滚动距离 > 最后一张图片的 offsetTop` 这个条件，即橙色线条 + 紫色线条 > 蓝色线条时触发加载函数，代码如下：\n\n![](http://oqhtscus0.bkt.clouddn.com/c8cda4bb070a7739eeec0fc968e91a1b.jpg-300)\n\n```js\nwindow.onscroll = function() {\n  // ...\n  if (scrollPX + bsHeight > imgList[imgList.length - 1].offsetTop) {// 浏览器高度 + 滚动距离 > 最后一张图片的 offsetTop\n    const fragment = document.createDocumentFragment()\n    for(let i = 0; i < 20; i++) {\n      const img = document.createElement('img')\n      img.setAttribute('src', `images/${i+1}.png`)\n      img.setAttribute('class', 'waterfall-box')\n      fragment.appendChild(img)\n    }\n    $waterfall.appendChild(fragment)\n  }\n}\n```\n\n因为父节点可能自定义节点，所以提供了对监听 scroll 函数的封装，代码如下：\n```js\n  proto.bind = function () {\n    const bindScrollElem = document.getElementById(this.opts.scrollElem)\n    util.addEventListener(bindScrollElem || window, 'scroll', scroll.bind(this))\n  }\n\n  const util = {\n    addEventListener: function (elem, evName, func) {\n      elem.addEventListener(evName, func, false)\n    },\n  }\n```\n\nresize 事件的监听与 scroll 事件监听大同小异，当触发了 resize 函数，调用 init 函数进行重置就行。\n\n### 使用发布-订阅模式和继承实现监听绑定\n\n既然以开发插件为目标，不能仅仅满足于功能的实现，还要留出相应的操作空间给开发者自行处理。联想到业务场景中瀑布流中下拉加载的图片一般都来自 Ajax 异步获取，那么加载的数据必然不能写死在库里，期望能实现如下调用(此处借鉴了 [waterfall](https://github.com/mqyqingfeng/waterfall) 的使用方式)，\n\n```js\nconst waterfall = new Waterfall({options})\n\nwaterfall.on(\"load\", function () {\n  // 此处进行 ajax 同步/异步添加图片\n})\n```\n\n观察调用方式，不难联想到使用发布/订阅模式来实现它，关于发布/订阅模式，之前在 [Node.js 异步异闻录](https://github.com/MuYunyun/fe_cloud/issues/7) 有介绍它。其核心思想即通过订阅函数将函数添加到缓存中，然后通过发布函数实现异步调用，下面给出其代码实现:\n\n```js\nfunction eventEmitter() {\n  this.sub = {}\n}\n\neventEmitter.prototype.on = function (eventName, func) { // 订阅函数\n  if (!this.sub[eventName]) {\n    this.sub[eventName] = []\n  }\n  this.sub[eventName].push(func) // 添加事件监听器\n}\n\neventEmitter.prototype.emit = function (eventName) { // 发布函数\n  const argsList = Array.prototype.slice.call(arguments, 1)\n  for (let i = 0, length = this.sub[eventName].length; i < length; i++) {\n    this.sub[eventName][i].apply(this, argsList) // 调用事件监听器\n  }\n}\n```\n\n接着，要让 Waterfall 能使用发布/订阅模式，只需让 Waterfall 继承 eventEmitter 函数，代码实现如下:\n\n```js\nfunction Waterfall(options = {}) {\n  eventEmitter.call(this)\n  this.init(options) // 这个 this 是 new 的时候，绑上去的\n}\n\nWaterfall.prototype = Object.create(eventEmitter.prototype)\nWaterfall.prototype.constructor = Waterfall\n```\n\n继承方式的写法吸收了基于构造函数继承和基于原型链继承两种写法的优点，以及使用 `Object.create` 隔离了子类和父类，关于继承更多方面的细节，可以另写一篇文章了，此处点到为止。\n\n### 小优化\n\n为了防止 scroll 事件触发多次加载图片，可以考虑用函数防抖与节流实现。在基于发布-订阅模式的基础上，定义了个 isLoading 参数表示是否在加载中，并根据其布尔值决定是否加载，代码如下：\n\n```js\nlet isLoading = false\nconst scroll = function () {\n  if (isLoading) return false // 避免一次触发事件多次\n  if (scrollPX + bsHeight > imgList[imgList.length - 1].offsetTop) { // 浏览器高度 + 滚动距离 > 最后一张图片的 offsetTop\n    isLoading = true\n    this.emit('load')\n  }\n}\n\nproto.done = function () {\n  this.on('done', function () {\n    isLoading = false\n    ...\n  })\n  this.emit('done')\n}\n```\n\n这时候需要在调用的地方加上 `waterfall.done`, 从而告知当前图片已经加载完毕，代码如下:\n\n```js\nconst waterfall = new Waterfall({})\nwaterfall.on(\"load\", function () {\n  // 异步/同步加载图片\n  waterfall.done()\n})\n```\n\n### 项目地址\n\n[项目地址](https://github.com/MuYunyun/waterfall)\n\n[此插件在 React 项目中的运用](https://github.com/MuYunyun/reactSPA/blob/master/src/common/pages/waterfall/index.js)\n\n项目简陋，不足之处在所难免，欢迎留下你们宝贵的意见。\n\n\n\n\n\n","tags":["轮子"],"categories":["轮子"]},{"title":"MVVM 框架解析之双向绑定","url":"%2Fposts%2F384a97b3%2F","content":"\n![](http://oqhtscus0.bkt.clouddn.com/203d14fb02edc5f37ae3841a2372434b.jpg-muyy)\n\n### MVVM 框架\n\n近年来前端一个明显的开发趋势就是架构从传统的 MVC 模式向 MVVM 模式迁移。在传统的 MVC 下，当前前端和后端发生数据交互后会刷新整个页面，从而导致比较差的用户体验。因此我们通过 Ajax 的方式和网关 REST API 作通讯，异步的刷新页面的某个区块，来优化和提升体验。\n\n<!--more-->\n\n#### MVVM 框架基本概念\n\n![](http://oqhtscus0.bkt.clouddn.com/203d14fb02edc5f37ae3841a2372434b.jpg-400)\n\n在 MVVM 框架中，View(视图) 和 Model(数据) 是不可以直接通讯的，在它们之间存在着 ViewModel 这个中间介充当着观察者的角色。当用户操作 View(视图)，ViewModel 感知到变化，然后通知 Model 发生相应改变；反之当 Model(数据) 发生改变，ViewModel 也能感知到变化，使 View 作出相应更新。这个一来一回的过程就是我们所熟知的双向绑定。\n\n#### MVVM 框架的应用场景\n\nMVVM 框架的好处显而易见：当前端对数据进行操作的时候，可以通过 Ajax 请求对数据持久化，只需改变 dom 里需要改变的那部分数据内容，而不必刷新整个页面。特别是在移动端，刷新页面的代价太昂贵。虽然有些资源会被缓存，但是页面的 dom、css、js 都会被浏览器重新解析一遍，因此移动端页面通常会被做成 SPA 单页应用。由此在这基础上诞生了很多 MVVM 框架，比如 React.js、Vue.js、Angular.js 等等。\n\n### MVVM 框架的简单实现\n\n![](http://oqhtscus0.bkt.clouddn.com/ecac404dd0a757b06ae1bd1b5c8212ef.jpg-600)\n\n模拟 Vue 的双向绑定流，实现了一个简单的 [MVVM 框架](https://github.com/MuYunyun/mvvm)，从上图中可以看出虚线方形中就是之前提到的 ViewModel 中间介层，它充当着观察者的角色。另外可以发现双向绑定流中的 View 到 Model 其实是通过 input 的事件监听函数实现的，如果换成 React(单向绑定流) 的话，它在这一步交给状态管理工具(比如 Redux)来实现。另外双向绑定流中的 Model 到 View 其实各个 MVVM 框架实现的都是大同小异的，都用到的核心方法是 `Object.defineProperty()`，通过这个方法可以进行数据劫持，当数据发生变化时可以捕捉到相应变化，从而进行后续的处理。\n\n![](http://oqhtscus0.bkt.clouddn.com/4b8db3d45cd6f37935e9bec42f0095c7.jpg-300)\n\n#### Mvvm(入口文件) 的实现\n\n一般会这样调用 Mvvm 框架\n\n```js\nconst vm = new Mvvm({\n            el: '#app',\n            data: {\n              title: 'mvvm title',\n              name: 'mvvm name'\n            },\n          })\n```\n\n但是这样子的话，如果要得到 title 属性就要形如 vm.data.title 这样取得，为了让 vm.title 就能获得 title 属性，从而在 Mvvm 的 prototype 上加上一个代理方法，代码如下：\n```js\nfunction Mvvm (options) {\n  this.data = options.data\n\n  const self = this\n  Object.keys(this.data).forEach(key =>\n    self.proxyKeys(key)\n  )\n}\n\nMvvm.prototype = {\n  proxyKeys: function(key) {\n    const self = this\n    Object.defineProperty(this, key, {\n      get: function () { // 这里的 get 和 set 实现了 vm.data.title 和 vm.title 的值同步\n        return self.data[key]\n      },\n      set: function (newValue) {\n        self.data[key] = newValue\n      }\n    })\n  }\n}\n```\n\n实现了代理方法后，就步入主流程的实现\n\n```js\nfunction Mvvm (options) {\n  this.data = options.data\n  // ...\n  observe(this.data)\n  new Compile(options.el, this)\n}\n```\n\n#### observer(观察者) 的实现\n\nobserver 的职责是监听 Model(JS 对象) 的变化，最核心的部分就是用到了 Object.defineProperty() 的 get 和 set 方法，当要获取 Model(JS 对象) 的值时，会自动调用 get 方法；当改动了 Model(JS 对象) 的值时，会自动调用 set 方法；从而实现了对数据的劫持，代码如下所示。\n\n```js\nlet data = {\n  number: 0\n}\n\nobserve(data)\n\ndata.number = 1 // 值发生变化\n\nfunction observe(data) {\n  if (!data || typeof(data) !== 'object') {\n    return\n  }\n  const self = this\n  Object.keys(data).forEach(key =>\n    self.defineReactive(data, key, data[key])\n  )\n}\n\nfunction defineReactive(data, key, value) {\n  observe(value) // 遍历嵌套对象\n  Object.defineProperty(data, key, {\n    get: function() {\n      return value\n    },\n    set: function(newValue) {\n      if (value !== newValue) {\n        console.log('值发生变化', 'newValue:' + newValue + ' ' + 'oldValue:' + value)\n        value = newValue\n      }\n    }\n  })\n}\n```\n\n运行代码，可以看到控制台输出 `值发生变化 newValue:1 oldValue:0`，至此就完成了 observer 的逻辑。\n\n#### Dep(订阅者数组) 和 watcher(订阅者) 的关系\n\n观测到变化后，我们总要通知给特定的人群，让他们做出相应的处理吧。为了更方便地理解，我们可以把订阅当成是订阅了一个微信公众号，当微信公众号的内容有更新时，那么它会把内容推送(update) 到订阅了它的人。\n\n![](http://oqhtscus0.bkt.clouddn.com/42bd217acd8b2ef5c76de1ca65ba7581.jpg-200)\n\n那么订阅了同个微信公众号的人有成千上万个，那么首先想到的就是要 new Array() 去存放这些人(html 节点)吧。于是就有了如下代码：\n\n```js\n// observer.js\nfunction Dep() {\n  this.subs = [] // 存放订阅者\n}\n\nDep.prototype = {\n  addSub: function(sub) { // 添加订阅者\n    this.subs.push(sub)\n  },\n  notify: function() { // 通知订阅者更新\n    this.subs.forEach(function(sub) {\n      sub.update()\n    })\n  }\n}\n\nfunction observe(data) {...}\n\nfunction defineReactive(data, key, value) {\n  var dep = new Dep()\n  observe(value) // 遍历嵌套对象\n  Object.defineProperty(data, key, {\n    get: function() {\n      if (Dep.target) { // 往订阅器添加订阅者\n        dep.addSub(Dep.target)\n      }\n      return value\n    },\n    set: function(newValue) {\n      if (value !== newValue) {\n        console.log('值发生变化', 'newValue:' + newValue + ' ' + 'oldValue:' + value)\n        value = newValue\n        dep.notify()\n      }\n    }\n  })\n}\n```\n\n初看代码也比较顺畅了，但可能会卡在 `Dep.target` 和 `sub.update`，由此自然而然地将目光移向 watcher，\n\n```js\n// watcher.js\nfunction Watcher(vm, exp, cb) {\n  this.vm = vm\n  this.exp = exp\n  this.cb = cb\n  this.value = this.get()\n}\n\nWatcher.prototype = {\n  update: function() {\n    this.run()\n  },\n\n  run: function() {\n    // ...\n    if (value !== oldVal) {\n      this.cb.call(this.vm, value) // 触发 compile 中的回调\n    }\n  },\n\n  get: function() {\n    Dep.target = this // 缓存自己\n    const value = this.vm.data[this.exp] // 强制执行监听器里的 get 函数\n    Dep.target = null // 释放自己\n    return value\n  }\n}\n```\n\n从代码中可以看到当构造 Watcher 实例时，会调用 get() 方法，接着重点关注 `const value = this.vm.data[this.exp]` 这句，前面说了当要获取 Model(JS 对象) 的值时，会自动调用 Object.defineProperty 的 get 方法，也就是当执行完这句的时候，Dep.target 的值传进了 observer.js 中的 Object.defineProperty 的 get 方法中。同时也一目了然地在 Watcher.prototype 中发现了 update 方法，其作用即触发 compile 中绑定的回调来更新界面。至此解释了 Observer 中 Dep.target 和 sub.update 的由来。\n\n来归纳下 Watcher 的作用，其充当了 observer 和 compile 的桥梁。\n\n1 在自身实例化的过程中，往订阅器(dep) 中添加自己\n\n2 当 model 发生变动，dep.notify() 通知时，其能调用自身的 update 函数，并触发 compile 绑定的回调函数实现视图更新\n\n最后再来看下生成 Watcher 实例的 compile.js 文件。\n\n#### compile(编译) 的实现\n\n首先遍历解析的过程有多次操作 dom 节点，为提高性能和效率，会先将跟节点 el 转换成 fragment(文档碎片) 进行解析编译，解析完成，再将 fragment 添加回原来的真实 dom 节点中。代码如下：\n\n```js\nfunction Compile(el, vm) {\n  this.vm = vm\n  this.el = document.querySelector(el)\n  this.fragment = null\n  this.init()\n}\n\nCompile.prototype = {\n  init: function() {\n    if (this.el) {\n      this.fragment = this.nodeToFragment(this.el) // 将节点转为 fragment 文档碎片\n      this.compileElement(this.fragment) // 对 fragment 进行编译解析\n      this.el.appendChild(this.fragment)\n    }\n  },\n  nodeToFragment: function(el) {\n    const fragment = document.createDocumentFragment()\n    let child = el.firstChild // △ 第一个 firstChild 是 text\n    while(child) {\n      fragment.appendChild(child)\n      child = el.firstChild\n    }\n    return fragment\n  },\n  compileElement: function(el) {...},\n}\n```\n\n这个简单的 mvvm 框架在对 fragment 编译解析的过程中对 `{% raw %}{{}}{% endraw %} 文本元素`、`v-on:click 事件指令`、`v-model 指令`三种类型进行了相应的处理。\n\n```js\nCompile.prototype = {\n  init: function() {\n    if (this.el) {\n      this.fragment = this.nodeToFragment(this.el) // 将节点转为 fragment 文档碎片\n      this.compileElement(this.fragment) // 对 fragment 进行编译解析\n      this.el.appendChild(this.fragment)\n    }\n  },\n  nodeToFragment: function(el) {...},\n  compileElement: function(el) {...},\n  compileText: function (node, exp) { // 对文本类型进行处理替换\n    const self = this\n    const initText = this.vm[exp]\n    this.updateText(node, initText) // 初始化\n    new Watcher(this.vm, exp, function(value) { // 实例化订阅者\n      self.updateText(node, value)\n    })\n  },\n\n  compileEvent: function (node, vm, exp, dir) { // 对事件指令进行处理\n    const eventType = dir.split(':')[1]\n    const cb = vm.methods && vm.methods[exp]\n\n    if (eventType && cb) {\n      node.addEventListener(eventType, cb.bind(vm), false)\n    }\n  },\n\n  compileModel: function (node, vm, exp) { // 对 v-model 进行处理\n    let val = vm[exp]\n    const self = this\n    this.modelUpdater(node, val)\n    node.addEventListener('input', function (e) {\n      const newValue = e.target.value\n      self.vm[exp] = newValue // 实现 view 到 model 的绑定\n    })\n  },\n}\n```\n\n在上述代码的 compileTest 函数中看到了期盼已久的 Watcher 实例化，对 Watcher 作用模糊的朋友可以往上回顾下 Watcher 的作用。另外在 compileModel 函数中看到了本文最开始提到的双向绑定流中的 View 到 Model 是借助 input 监听事件变化实现的。\n\n### 项目地址\n\n本文记录了些阅读 mvvm 框架源码关于双向绑定的心得，并动手实践了一个简版的 mvvm 框架，不足之处在所难免，欢迎指正。\n\n[项目演示](http://muyunyun.cn/mvvm/)\n\n[项目地址](https://github.com/MuYunyun/mvvm)\n\n\n","tags":["Mvvm"],"categories":["Mvvm"]},{"title":"2017 年终总结 —— 在路上","url":"%2Fposts%2Fb9cd3f63%2F","content":"![](http://oqhtscus0.bkt.clouddn.com/6114931ddce0b5e56ade13b45e2b3ec6.jpg-muyy)\n\n> 不久前年会主题征集活动中，我提交的主题是《在路上》，和骑手们一样，我们亦不是在路上呢？\n\n<!--more-->\n\n恰逢踏入社会一年之际写下第一篇年终总结，百感交集，有初融入团队的喜悦、有独自完成需求的兴奋、有一次次团建的畅饮也有过为自己能力不足的懊恼以及与好友离别的感伤。\n\n通过这篇总结，希望能记录些琐事，并给 2018 年的自己定下 promise。\n\n### 启程\n\n按捺不住走出校园的兴奋，走入我达新世界的大门。当时未进公司的时候，在朋友圈中看到的小伙伴们的照片，当时心中一阵惊叹，\"这么帅！！要拖后腿了\"，不曾想到后来几个月和每个人发生的故事，已然成为生命中不可或缺的色彩了。时隔一年当再次回味这张照片时，似乎里面藏着初心。\n\n![](http://oqhtscus0.bkt.clouddn.com/dd07286ed73f1c2f6091521254b9abf5.jpg-300)\n\n春节结束后公司如期举行了年会，我在倒数第二个节目中独奏了二胡~，前端部门的年会中奖率也是全公司最高的，一度让其他部门的人说是改了脚本o(╯□╰)o。运气也是实力的一部分吧，不过我没有中奖。再接着是为期 15 天的小黑屋封闭式开发快递模块，这也是我第一次感觉到了挫败感，让[林师傅](http://blog.5udou.cn/)帮填了好多坑。期间李开复老师来参观我们公司，我也跑去趁了张合照。同时迎来了陪我渡过短暂岁月的小伙伴虾球。一只可爱的猫咪。现在在新主人家过得很好。\n\n### batman && hawkeye\n\n在往后的一段时间，前端部门内部进行了更细致的分工划分，我被划分到了直营业务组，主要负责 batman(客服关系系统) 以及 hawkeye(运维系统)的开发与维护，期间经历了并参与了 batman、hawkeye 的技术栈迭代，从老鹰眼的 reflux 到 redux，以及 batman 网关独立抽离成一个 ts 项目。为了更好的熟悉 react 全家桶的工作流程，五月份的时候在仿照 batman 和 hawkeye 写了个 [demo](https://github.com/MuYunyun/reactSPA)，现在收获了几百的 Star，也算今年的一大收获吧。o(╯□╰)o\n\n下面谈谈今年在做项目的收获和成长：\n\n* 首先是带我进入了奇妙的 React 技术栈 和 ES6 世界，对相关的知识点进行了实践；\n* 能合理对组件进行拆分；\n* 对 JS 异步流程有了一定认知；\n* 对底层组件的设计有了一定的认知；\n* 对 git 多人合作的流程有了一定的实践；\n* 在遇到不懂的知识时学会进行翻相关文档以及阅读源码；\n* 最后在 npm 上尝试发布了[第一个包](https://github.com/MuYunyun/diana)，并用到了 batman 中;\n\n谈完收获再来谈谈不足：\n\n* 知识点体系没有梳理成网，比较零散；\n* 知识面广度和深度都还欠缺;\n* 在项目优化的层面没有特别上心;\n* 在和别人交谈时，抓重点能力以及逻辑整合能力有待加强；\n* 效率不足，容易被琐事影响；\n\n### 高山仰止\n\n分享一位同行的博客中让我感慨良多的话：`行远自迩，登高自卑`。在写这篇总结前我曾以为这句话是说当你登高的途中看到比你站在更高更远处的人的时候会产生自卑感，现在不经莞尔一笑，`风起于青萍之末，浪成于微澜之间`，那些让我高高仰望的人不正是有着一颗常人难能企及的大毅力和大心脏吗？而我呢，希望能离那群人能近一点是一点吧。想到现在负责的项目名为 batman，突然谐音想到了 better-man。新年计划做一个让别人靠得住的 better-man。\n\n### 番外随笔\n\n今年刷了好多动漫，整体偏热血、玄幻类型，也入了 B 站刷了几部小清新动漫，如四月是你的谎言、宝石之国~，和朋友一起刷了几部有意义的电影，比如爱乐之城、寻梦环游记~；另外从 4 月份开始使用网易云音乐来，累计听了七八千首歌吧，基本码代码的时候都会带着耳机~，以英文歌、民谣为主，[我的歌单如下](https://music.163.com/#/user/home?id=472504060)；\n\n在游戏方面发挥稳定，王者荣耀上了最强王者以及为团队拿下个冠军，不过感觉花了太多时间在上面，浪费了不少原定的计划~，不过也算是青春的成长吧。公司年假即将会去曼巴玩上一段时间，也将算是我第一次出国。\n\n看书方面主要是技术类的，大概阅读了 6、7 本，这个比较尴尬了，看书看得慢而且看过的知识点也不是完全吃透了，新年期待改善。个人产出方面也比较低产，翻译文章和原创文章加起来十几篇~，我把它们集合在了 [blog](https://github.com/MuYunyun/blog)这个项目里。不过也有值得高兴的事，搭建了自己的博客，并且写文章的深度自己感觉有所提高(虽然依然菜)。然后很遗憾的是今年的技术交流会一场也没参加成，怪自己的消息不灵通加上水平的不足。\n\n### 总结展望篇\n\n这部分是对自己打算要成为一个 better-man 的一个 promise 吧。就结合文章中提到的不足点进行相应的改善(自己想到解决方案的先记下来了)，也就是新年的计划。望监督。\n\n| problen | flag |\n| :-: | :-: |\n|知识点碎片化|对已有的知识点进行思维脑图的整理，对将来的知识点也采取思维脑图的方式进行学习|\n|知识面广度和深度欠缺|参与到一个千星 Star 的开源项目的改善，提高阅读源码的能力，阅读 6 本技术书籍，阅读 1 本非技术书籍|\n|项目优化方面没有用心|课外学习积累相关方面知识并尝试用到公司项目中|\n|没去成技术交流会|带有目的性地参加 1 到 2 场前端技术交流会|\n|沟通能力不足|避免讲话结巴，加强语言组织能力和逻辑能力，没想清楚问题之前不要轻易回答|\n|效率不足|加强自己的自控能力，规定的时间做规定的事情，做到按时起睡，不晚于 8 点半起床|\n","tags":["年度总结"],"categories":["年度总结"]},{"title":"尝试造了个工具类库，名为 Diana","url":"%2Fposts%2F4490810f%2F","content":"![](http://oqhtscus0.bkt.clouddn.com/5aa428c1014d75db4d2d331fb2b41334.jpg-muyy)\n\n> 项目地址: [diana](https://github.com/MuYunyun/diana)\n\n> 文档地址: [http://muyunyun.cn/diana/](http://muyunyun.cn/diana/)\n\n<!-- more -->\n### 造轮子的意义\n为啥已经有如此多的前端工具类库还要自己造轮子呢？个人认为有以下几个观点吧：\n* 定制性强，能根据自己的需求为主导延伸开发。万一一不小心还能帮到别人（比如 React 库）；\n* 纸上得来终觉浅，很多流行的库，只是照着它们的 API 进行使用，其实这些库里蕴含着大量的知识、技巧，最好的办法就是仿照它们来写些小 demo，从而体会这些库的精髓；\n* 造轮子的过程中能让自己体会到与平常业务开发不一样的乐趣；比如和日常业务开发中很大的一个区别是会对测试用例具有比较严格的要求；而且写文档能力提升了。\n* 就先瞎编到这里了。。。\n\n抛开内部方法(写相应的专题效果可能会更好，所以这里先略过)，下面分享一些开发 [diana 库](https://github.com/MuYunyun/diana) 时的一些心得：\n\n### 项目目录结构\n```\n├── LICENSE                  开源协议\n├── README-zh_en.md          英文说明文档\n├── README.md                中文说明文档\n├── coverage                 代码覆盖率文件\n├── docs                     文档目录\n│   └── static-parts\n│       ├── index-end.html   静态文档目录结尾文件\n│       └── index-start.html 静态文档目录开头文件\n├── karma.conf.js            karma 配置文件\n├── lib\n│   ├── diana.back.js        服务端引用入口\n│   └── diana.js             浏览器引用入口\n├── package.json\n├── script\n│   ├── build.js             构建文件\n│   ├── check.js             结合 pre-commit 进行 eslint 校验\n│   ├── tag-script.js        自动生成文档的标签\n│   ├── web-script.js        自动生成文档\n│   ├── webpack.browser.js   浏览器端 webpack 配置文件\n│   └── webpack.node.js      服务器端 webpack 配置文件\n├── snippets\n├── src\n│   ├── browser              浏览器端方法\n│   ├── common               共用方法\n│   ├── node                 node 端方法\n│   └── util.js              库内通用方法\n├── tag_database             文档标签\n└── test                     测试文件\n    ├── browserTest\n    ├── commonTest\n    ├── index.js\n    └── nodeTest\n```\n目录结构也随着方法的增多在不停迭代当中，建议直接到[库中](https://github.com/MuYunyun/diana)查看最新的目录结构。\n\n相应地，具体的方法会随着时间迭代，所以首先推荐查看[文档](http://muyunyun.cn/diana/)，点击如下图的 Ⓢ 就能查看源码。\n\n![](http://oqhtscus0.bkt.clouddn.com/54db4bd9519dd7938b0cc38e0b9a50ea.jpg-300)\n\n### 让模块同时在 Node.js 与浏览器中运行\n\n我们可以通过如下方法来判断模块当前是运行在 Node.js 还是浏览器中，然后使用不同的方式实现我们的功能。\n\n```js\n// Only Node.JS has a process variable that is of [[Class]] process\nconst isNode = Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]'\n```\n\n但如果用户使用了模块打包工具，这样做会导致 Node.js 与浏览器的实现方式都会被包含在最终的输出文件中。针对这个问题，开源社区提出了在 package.json 中添加 browser 字段的[提议](https://github.com/defunctzombie/package-browser-field-spec)，目前 webpack 和 rollup 都已经支持这个字段了。\n\n给 browser 字段提供一个文件路径作为在浏览器端使用时的模块入口，但需要注意的是，打包工具会优先使用 browser 字段指定的文件路径作为模块入口，所以你的 main 字段 和 module 字段会被忽略，但是这会导致打包工具不会优化你的代码。详细信息请参考[这个问题](http://link.zhihu.com/?target=https%3A//github.com/webpack/webpack/issues/4674)。\n\n在 [diana 库](https://github.com/MuYunyun/diana) 为了在不同环境中使用适当的文件，在 package.json 中进行了如下声明：\n\n```js\n  \"browser\": \"lib/diana.js\",\n  \"main\": \"lib/diana.back.js\", // 或者 \"module\": \"lib/diana.back.js\",\n```\n\n这样一来，在 node 环境中，引用的是 `lib/diana.back.js` 文件，在浏览器环境中，引用的是 `lib/diana.js` 文件。然后就能愉快地在浏览器端和 node 端愉快地使用自己特有的 api 了。\n\n### 常见模块规范比较\n\n另外为了使 [diana 库](https://github.com/MuYunyun/diana) 的打包文件兼容 node 端、以及浏览器端的引用，选择了 UMD 规范进行打包，那么为什么要选择 UMD 规范呢？让我们看下以下几种规范之间的异同：\n#### CommonJS\n\n* CommonJs 是服务器端模块的规范，`Node.js 采用了这个规范`。这些规范涵盖了模块、二进制、Buffer、字符集编码、I/O流、进程环境、文件系统、套接字、单元测试、服务器网关接口、包管理等。\n\n* 根据 CommonJS 规范，一个单独的文件就是一个模块。加载模块使用 `require` 方法，该方法读取一个文件并执行，最后返回文件内部的 `exports` 对象。\n\n* CommonJS 加载模块是同步的。像 Node.js 主要用于服务器的编程，加载的模块文件一般都已经存在本地硬盘，所以加载起来比较快，不用考虑异步加载的方式，所以 CommonJS 规范比较适用。但如果是浏览器环境，要从服务器加载模块，这是就必须采用异步模式。所以就有了 AMD、CMD 解决方案。\n\n#### AMD、CMD\n\n* AMD 是 RequireJS 在推广过程中对模块定义的规范化产物。AMD 推崇提前执行。\n```js\n // AMD 默认推荐的是\ndefine(['./a', './b'], function(a, b) {\n  a.doSomething()\n  b.doSomething()\n  ...\n})\n```\n\n* CMD 是 SeaJS 在推广过程中对模块定义的规范化产物。CMD 推崇依赖就近。\n```js\n// CMD\ndefine(function(require, exports, module) {\n  var a = require('./a')\n  a.doSomething()\n  var b = require('./b')\n  b.doSomething()\n  ...\n})\n```\n\n#### UMD\n\nUMD 是 AMD 和 CommonJS 的结合。因为 AMD 是以浏览器为出发点的异步加载模块，CommonJS 是以服务器为出发点的同步加载模块，所以人们想出了另一个更通用的模式 UMD，来解决跨平台的问题。\n\n[diana 库](https://github.com/MuYunyun/diana/blob/master/lib/diana.js#L1) 选择了以 umd 方式进行输出，来看下 UMD 做了啥：\n```js\n(function (root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') { // UMD 先判断是否支持 Node.js 的模块（exports）是否存在，存在则使用 CommonJS 模式\n    module.exports = factory()\n  } else if (typeof define === 'function' && define.amd) { // 接着判断是否支持 AMD（define是否存在），存在则使用 AMD 方式加载模块。\n    define([], factory)\n  } else if (typeof exports === 'object') { // CommonJS 的另一种形式\n    exports['diana'] = factory()\n  } else\n    root['diana'] = factory() // Window\n})(this, function() {\n  return module\n})\n```\n\n### 测试踩坑之路\n\n#### 代码覆盖率\n单元测试的代码覆盖率统计，是衡量测试用例好坏的一个的方法。但凡是线上用的库，基本上都少不了高质量的代码覆盖率的检测。如下图为 diana 库的测试覆盖率展示。\n\n![](http://oqhtscus0.bkt.clouddn.com/7efbacda331e914df3eedb3670b747a8.jpg-400)\n\n可以看到覆盖率分为以下 4 种类型，\n\n* 行覆盖率（line coverage）：是否每一行都执行了？\n* 函数覆盖率（function coverage）：是否每个函数都调用了？\n* 分支覆盖率（branch coverage）：是否每个if代码块都执行了？\n* 语句覆盖率（statement coverage）：是否每个语句都执行了？\n\n番外：github 上显示的覆盖率是根据行覆盖率来展示的。\n[![codecov](https://codecov.io/gh/MuYunyun/diana/branch/master/graph/badge.svg)](https://codecov.io/gh/MuYunyun/diana)\n\n#### mocha + istanbul\n\n[最初的版本](https://github.com/MuYunyun/diana/blob/d81991f588046b428e2ac959fb6b87e6edb4938e/package.json#L23), 仅仅用到 mocha 进行测试 *.test.js 文件，然后在 [codecov](https://codecov.io/gh/MuYunyun/diana) 得到测试覆盖率。\n\n#### 引人 karma\n\n如果仅仅测试 es5、es6 的语法，其实用 mocha 就已经够用了，但是涉及到测试 Dom 操作的语法等就必须建立一个浏览器，在上面进行测试。karma 的作用其实就是自动帮我们建立一个测试用的浏览器环境。\n\n为了让浏览器支持 Common.js 规范，中间用了 karma + browserify，尽管测试用例都跑通了，但是最后的代码覆盖率的文件里只有各个方法的引用路径。最后只能又回到 karma + webpack 来，这里又踩到一个坑，[打包编译JS代码覆盖率问题](https://segmentfault.com/a/1190000004283830)，踩了一些坑后，终于实现了可以查看编译前代码的覆盖率。图如下：\n\n![](http://oqhtscus0.bkt.clouddn.com/e0ba39166c6999a3c3ce76bc63f511aa.jpg-400)\n\n通过这幅图我们能清晰地看到源代码中测试用例跑过各行代码的次数(左侧的数字)，以及测试用例没有覆盖到的代码(图中红色所示)。然后我们就能改善相应的测试用例从而提高测试覆盖率。\n\n[配置文件](https://github.com/MuYunyun/diana/blob/master/karma.conf.js)，核心部分如下:\n```js\nmodule.exports = function(config) {\n  config.set({\n    files: ['test/index.js'], // 需载入浏览器的文件\n    preprocessors: { // 预处理\n      'test/index.js': ['webpack', 'coverage']\n    },\n    webpack: {\n      module: {\n        rules: [{\n          test: /\\.js$/,\n          use: { loader: 'sourcemap-istanbul-instrumenter-loader' }, // 这里用 istanbul-instrumenter-loader 插件的 0.0.2 版本，其它版本有坑~\n          exclude: [/node_modules/, /\\.spec.js$/],\n        }],\n      }\n    },\n    coverageReporter: {\n      type: 'lcov', // 貌似只能支持这种类型的读取\n      dir: 'coverage/'\n    },\n    remapIstanbulReporter: { // 生成 coverage 文件\n      reports: {\n        'text-summary': null,\n        json: 'coverage/coverage.json',\n        lcovonly: 'coverage/lcov.info',\n        html: 'coverage/html/',\n      }\n    },\n    reporters: ['progress', 'karma-remap-istanbul'], // remap-isbanbul 也报了一个未找到 sourcemap 的 error，直接注释了 remap-istanbul 包的 CoverageTransformer.js 文件的 169 行，以后有机会再捣鼓吧。（心累）\n    ...\n  })\n}\n```\n\n### 总结\n\n本文围绕 [diana 库](https://github.com/MuYunyun/diana) 对造轮子的意义，模块兼容性，测试用例进行了思考总结。后续会对该库流程自动化以及性能上做些分享。\n该库参考学习了很多优秀的库，感谢 [underscore](https://github.com/jashkenas/underscore)、[outils](https://github.com/proYang/outils)、[ec-do](https://github.com/chenhuiYj/ec-do)、[30-seconds-of-code](https://github.com/Chalarangelo/30-seconds-of-code) 等库对我的帮助。\n\n最后欢迎各位大佬在 [issues](https://github.com/MuYunyun/diana/issues) 尽情吐槽。\n\n","tags":["轮子"],"categories":["轮子"]},{"title":"走近 Python (类比 JS)","url":"%2Fposts%2Fa9d08041%2F","content":"![](http://oqhtscus0.bkt.clouddn.com/c5438d5b79ea49066234e0328fde04e1.jpg-muyy)\n\n> 本文首发在 [个人博客](http://muyunyun.cn/posts/a9d08041/)\n\nPython 是一门运用很广泛的语言，自动化脚本、爬虫，甚至在深度学习领域也都有 Python 的身影。作为一名前端开发者，也了解 ES6 中的很多特性借鉴自 Python (比如默认参数、解构赋值、Decorator等)，同时本文会对 Python 的一些用法与 JS 进行类比。不管是提升自己的知识广度，还是更好地迎接 AI 时代，Python 都是一门值得学习的语言。\n\n<!--more-->\n\n### 数据类型\n\n在 Python 中，最常用的能够直接处理的数据类型有以下几种：\n\n* 数字[整数(int)、浮点型(float)、长整型(long)、复数(complex)]\n* 字符串(str)\n* 布尔值(bool)\n* 空值(None)\n\n除此之外，Python 还提供了列表[list]、字典[dict] 等多种数据类型，这在下文中会介绍。\n\n#### 类型转换与类型判断\n\n与 JS 十分类似，python 也能实现不同数据类型间的强制与隐式转换，例子如下：\n\n强制类型转换:\n``` py\nint('3') # 3\nstr(3.14) # '3.14'\nfloat('3.14') # 3.14\n# 区别于 JS 只有 Number 一种类型，Python 中数字中的不同类型也能相互强制转换\nfloat(3) # 3.0\nbool(3) # True\nbool(0) # False\n```\n\n隐式类型转换:\n``` py\n1 + 1.0 # 2.0\n1 + False # 1\n1.0 + True # 2.0\n# 区别于 JS 的 String + Number = String, py 中 str + int 会报错\n1 + '1' # TypeError: cannot concatenate 'str' and 'int' objects\n```\n\n此外写代码的时候经常会需要判断值的类型，可以 使用 python 提供的 type() 函数获取变量的类型，或者使用 isinstance(x, type) 来判断 x 是否属于相应的 type 类型。\n``` py\ntype(1.3) == float # True\nisinstance('a', str) # True\nisinstance(1.3, int) # False\nisinstance(True, bool) # True\nisinstance([], list) # True\nisinstance({}, dict) # True\n```\n\n### 有序集合类型\n\n集合是指包含一组元素的数据结构，有序集合即集合里面的元素是是按照顺序排列的，Python 中的有序集合大概有以下几类：list, tuple, str, unicode。\n\n#### list 类型\n\nPython 中 List 类型类似于 JS 中的 Array,\n\n``` py\nL = [1, 2, 3]\nprint L[-1] # '3'\n\nL.append(4) # 末尾添加元素\nprint L # [1, 2, 3, 4]\n\nL.insert(0, 'hi') # 指定索引位置添加元素\nprint L # ['hi', 1, 2, 3, 4]\n\nL.pop() # 末尾移除元素 L.pop(2) ?????? 2 ???\nprint L # ['hi', 1, 2, 3]\n```\n\n#### tuple 类型\n\ntuple 类型是另一种有序的列表，中文翻译为“ 元组 ”。tuple 和 list 非常类似，但是，tuple 一旦创建完毕，就不能修改了。\n\n``` py\nt = (1, 2, 3)\nprint t[0] # 1\nt[0] = 11 # TypeError: 'tuple' object does not support item assignment\n\nt = (1)\nprint t # 1  t 的结果是整数 1\n\nt = (1,) # 为了避免出现如上有歧义的单元素 tuple，所以 Python 规定，单元素 tuple 要多加一个逗号“,”\nprint t # (1,)\n```\n\n### 无序集合类型\n\n#### dict 类型\n\nPython 中的 dict 类型类似于 JS 中的 {} (最大的不同是它是没有顺序的), 它有如下特点:\n\n* 查找速度快 (无论 dict 有 10 个元素还是 10 万个元素，查找速度都一样)\n* 占用内存大 (与 list 类型相反)\n* dict 中的 key 不能重复\n* dict 中存储的 key-value 序对是没有顺序的\n\n``` py\nd = {\n    'a': 1,\n    'b': 2,\n    'c': 3\n}\n\nprint d # {'a': 1, 'c': 3, 'b': 2}  可以看出打印出的序对没有按正常的顺序打出\n\n# 遍历 dict\nfor key,value in d.items():\n    print('%s: %s' % (key,value))\n# a: 1\n# c: 3\n# b: 2\n```\n\n#### set 类型\n\n有的时候，我们只想要 dict 的 key，不关心 key 对应的 value，而且要保证这个集合的元素不会重复，这时，set 类型就派上用场了。set 类型有如下特点：\n\n* set 存储的元素和 dict 的 key 类似，必须是不变对象\n* set 存储的元素也是没有顺序的\n\n```py\ns = set(['A', 'B', 'C', 'C'])\nprint s # set(['A', 'C', 'B'])\n\ns.add('D')\nprint s # set(['A', 'C', 'B', 'D'])\n\ns.remove('D')\nprint s # set(['A', 'C', 'B'])\n```\n\n### Python 中的迭代\n\n在介绍完 Python 中的有序集合和无序集合类型后，必然存在遍历集合的 for 循环。但是和其它语言的标准 for 循环不同，Python 中的所有迭代是通过 for ... in 来完成的。以下给出一些常用的迭代 demos:\n\n索引迭代：\n\n``` py\nL = ['apple', 'banana', 'orange']\nfor index, name in enumerate(L):  # enumerate() 函数把 ['apple', 'banana', 'orange'] 变成了类似 [(0, 'apple), (1, 'banana'), (2, 'orange')] 的形式\n    print index, '-', name\n\n# 0 - apple\n# 1 - banana\n# 2 - orange\n```\n\n迭代 dict 的 value:\n\n``` py\nd = { 'apple': 6, 'banana': 8, 'orange': 5 }\nprint d.values() # [6, 8, 5]\nfor v in d.values()\n    print v\n# 6\n# 8\n# 5\n```\n\n迭代 dict 的 key 和 value:\n\n``` py\nd = { 'apple': 6, 'banana': 8, 'orange': 5 }\nfor key, value in d.items()\n    print key, ':', value\n# apple : 6\n# banana: 8\n# orange: 5\n```\n\n### 切片操作符\n\nPython 提供的切片操作符类似于 JS 提供的原生函数 slice()。有了切片操作符，大大简化了一些原来得用循环的操作。\n\n``` py\nL = ['apple', 'banana', 'orange', 'pear']\nL[0:2] # ['apple', 'banana'] 取前 2 个元素\nL[:2] # ['apple', 'banana'] 如果第一个索引是 0，可以省略\nL[:] # ['apple', 'banana', 'orange', 'pear'] 只用一个 : ，表示从头到尾\nL[::2] # ['apple', 'orange'] 第三个参数表示每 N 个取一个，这里表示从头开始，每 2 个元素取出一个来\n```\n\n### 列表生成器\n\n如果要生成 [1x1, 2x2, 3x3, ..., 10x10] 怎么做？方法一是循环：\n\n``` py\nL = []\nfor x in range(1, 11):\n    L.append(x * x)\n```\n\n但是循环太繁琐，而列表生成式则可以用一行语句代替循环生成上面的 list：\n\n```py\n# 把要生成的元素 x * x 放到前面，后面跟 for 循环，就可以把 list 创建出来\n[x * x for x in range(1, 11)]\n# [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n```\n\n列表生成式的 for 循环后面还可以加上 if 判断(类似于 JS 中的 filter() 函数)，示例如下：\n\n``` py\n[x * x for x in range(1, 11) if x % 2 == 0]\n# [4, 16, 36, 64, 100]\n```\n\nfor 循环可以嵌套，因此，在列表生成式中，也可以用多层 for 循环来生成列表。\n\n```py\n[m + n for m in 'ABC' for n in '123']\n# ['A1', 'A2', 'A3', 'B1', 'B2', 'B3', 'C1', 'C2', 'C3']\n```\n\n### Python 函数\n\n#### 默认参数\n\nJS 中 ES6 的 默认参数正是借鉴于 Python，用法如下：\n\n``` py\ndef greet(name='World'):\n    print 'Hello, ' + name + '.'\n\ngreet() # Hello, World.\ngreet('Python') # Hello, Python.\n```\n\n#### 可变参数\n\n类似于 JS 函数中自动识别传入参数的个数，Python 也提供了定义可变参数，即在可变参数的名字前面带上个 `*` 号。\n\n``` py\ndef fn(*args):\n    print args\n\nfn()  # ()\nfn('a') # ('a',)\nfn('a', 'b') # ('a', 'b')\n```\n\nPython 解释器会把传入的一组参数组装成一个 tuple 传递给可变参数，因此，在函数内部，直接把变量 args 看成一个 tuple 就好了。\n\n#### 常用高阶函数\n\nPython 中常用的函数 (map、reduce、filter) 的作用和 JS 中一致，只是用法稍微不同。\n\n* map 函数: 接收一个函数 f 和一个 list，并通过把函数 f 依次作用在 list 的每个元素上，得到一个新的 list 并返回。\n\n```py\ndef f(x):\n    return x * x\nprint map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9]) # [1, 4, 9, 16, 25, 36, 49, 64, 81]\n```\n\n* reduce 函数: 接收一个函数 f 和一个 list(可以接受第三个值作为初始值)，reduce() 对 list 的每个元素反复调用函数 f，并返回最终结果值。\n\n```py\ndef f(x, y):\n    return x * y\n\nreduce(f, [1, 3, 5]) # 15\n```\n\n* filter 函数: 接收一个函数 f 和一个list，这个函数 f 的作用是对每个元素进行判断，返回 True或 False，filter() 根据判断结果自动过滤掉不符合条件的元素，返回由符合条件元素组成的新 list。\n\n```py\ndef is_odd(x):\n    return x % 2 == 1\n\nfilter(is_odd, [1, 4, 6, 7, 9, 12, 17]) # [1, 7, 9, 17]\n```\n\n#### 匿名函数\n\n和 JS 的匿名函数不同的地方是，Python 的匿名函数中只能有一个表达式，且不能写 return。拿 map() 函数为例：\n\n```py\nmap(lambda x: x * x, [1, 2, 3, 4, 5, 6, 7, 8, 9]) # [1, 4, 9, 16, 25, 36, 49, 64, 81]\n```\n\n关键词 lambda 表示匿名函数，冒号前面的 x 表示函数参数，可以看出匿名函数 `lambda x: x* x` 实际上就是:\n\n``` py\ndef f(x):\n    return x * x\n```\n\n#### 闭包\n\n之前写过一些关于 JS 闭包的文章，比如 [深入浅出JavaScript之闭包（Closure）](http://www.cnblogs.com/MuYunyun/p/5930703.html)、以及 [读书笔记-你不知道的 JavaScript (上)](http://muyunyun.cn/posts/4a895cbd/)，Python 中闭包的定义和 JS 中的是一致的即：内层函数引用了外层函数的变量，然后返回内层函数。下面来看下 Py 中闭包之 for 循环经典问题：\n\n``` py\n# 希望一次返回3个函数，分别计算1x1,2x2,3x3:\ndef count():\n    fs = []\n    for i in range(1, 4):\n        def f():\n            return i * i\n        fs.append(f)\n    return fs\n\nf1, f2, f3 = count() # 这种写法相当于 ES6 中的解构赋值\nprint f1(), f2(), f3() # 9 9 9\n```\n\n老问题了，f1(), f2(), f3() 结果不应该是 1, 4, 9 吗，实际结果为什么都是 9 呢？\n\n原因就是当 count() 函数返回了 3 个函数时，这 3 个函数所引用的变量 i 的值已经变成了 3。由于 f1、f2、f3 并没有被调用，所以，此时他们并未计算 i*i，当 f1 被调用时，i 已经变为 3 了。\n\n要正确使用闭包，就要确保引用的局部变量在函数返回后不能变。代码修改如下:\n\n方法一: 可以理解为创建了一个封闭的作用域，i 的 值传给 j 之后，就和 i 没任何关系了。每次循环形成的闭包都存进了内存中。\n```py\ndef count():\n    fs = []\n    for i in range(1, 4):\n        def f(j):\n            def g(): # 方法一\n                return j * j\n            return g\n        r = f(i)\n        fs.append(r)\n    return fs\n\nf1, f2, f3 = count()\nprint f1(), f2(), f3() # 1 4 9\n```\n\n方法二：思路比较巧妙，用到了默认参数 j 在函数定义时可以获取到 i 的值，虽然没有用到闭包，但是和方法一有异曲同工之处。\n```py\ndef count():\n    fs = []\n    for i in range(1, 4):\n        def f(j = i): # 方法二\n            return j * j\n        fs.append(f)\n    return fs\n\nf1, f2, f3 = count()\nprint f1(), f2(), f3() # 1 4 9\n```\n\n#### decorator 装饰器\n\nES6 的语法中的 decorator 正是借鉴了 \bPython 的 decorator。decorator 本质上就是`一个高阶函数，它接收一个函数作为参数，然后返回一个新函数`。\n\n那装饰器的作用在哪呢？先上一段日常项目中用 ts 写的网关代码：\n\n```js\n@Post('/rider/detail')  // URL 路由\n@log()                   // 打印日志\n  @ResponseBody\n  public async getRiderBasicInfo(\n    @RequestBody('riderId') riderId: number,\n    @RequestBody('cityId') cityId: number,\n  ) {\n    const result = await this.riderManager.findDetail(cityId, riderId)\n    return result\n  }\n```\n\n可以看出使用装饰器可以极大地简化代码，避免每个函数(比如日志、路由、性能检测)编写重复性代码。\n\n回到 Python 上，Python 提供的 @ 语法来使用 decorator，`@ 等价于 f = decorate(f)`。下面来看看 @log() 在 Python 中的实现:\n\n```py\n# 我们想把调用的函数名字给打印出来\n@log()\ndef factorial(n):\n    return reduce(lambda x,y: x*y, range(1, n+1))\nprint factorial(10)\n\n# 来看看 @log() 的定义\ndef log():\n    def log_decorator(f):\n        def fn(x):\n            print '调用了函数' + f.__name__ + '()'\n            return f(x)\n        return fn\n    return log_decorator\n\n# 结果\n# 调用了函数 factorial()\n# 3628800\n```\n\n### class\n#### 面向对象编程\n\n面向对象编程是一种程序设计范式，基本思想是：用类定义抽象类型，然后根据类的定义创建出实例。在掌握其它语言的基础上，还是比较容易理解这块知识点的，比如从下面两种写法可以看出不同语言的语言特性间竟然有如此多的共性。\n\nes6: (附：本文的主题是 python，所以只是初略展示下 js 中类的定义以及实例的创建，为了说明写法的相似性)\n```js\nclass Person {\n    constructor(name, age) {\n        this.name = name\n        this.age = age\n    }\n}\n\nconst child1 = new Person('Xiao Ming', 10)\n```\n\nPython: (核心要点写在注释中)\n```py\n# 定义一个 Person 类：根据 Person 类就可以造成很多 child 实例\nclass Person(object):\n    address = 'Earth' # 类属性 (实例公有)\n    def __init__(self, name, age): # 创建实例时，__init__()方法被自动调用\n        self.name = name\n        self.age = age\n    def get_age(self): # 定义实例方法，它的第一个参数永远是 self，指向调用该方法的实例本身，其他参数和普通函数是一样的\n        return self.age\n\nchild1 = Person('Xiao Ming', 10)\nchild2 = Person('Xiao Hong', 9)\n\nprint child1.name # 'Xiao Ming'\nprint child2.get_age() # 9\nprint child1.address # 'Earth'\nprint child2.address # 'Earth'\n```\n\n#### 继承\n\nchild 属于 Student 类，Student 类属于 People 类，这就引出了继承: 即获得了父类的方法属性后又能添加自己的方法属性。\n\n```py\nclass Person(object):\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\nclass Student(Person):\n    def __init__(self, name, age, grade):\n        super(Student, self).__init__(name, age) # 这里也能写成 Person.__init__(self, name, age)\n        self.grade = grade\n\ns = Student('Xiao Ming', 10, 90)\nprint s.name # 'Xiao Ming'\nprint s.grade # 90\n```\n\n可以看到子类在父类的基础上又增加了 grade 属性。我们可以再来看看 s 的类型。\n\n```py\nisinstance(s, Person)\nisinstance(s, Student)\n```\n\n可以看出，Python 中在一条继承链上，一个实例可以看成它本身的类型，也可以看成它父类的类型。\n","tags":["Python"],"categories":["Python"]},{"title":"Node.js 异步异闻录","url":"%2Fposts%2F7b9fdc87%2F","content":"\n![](http://oqhtscus0.bkt.clouddn.com/d2867e4c299fe6b1f84d9610a6af1eb5.jpg-muyy)\n\n提到 Node.js, 我们脑海就会浮现异步、非阻塞、单线程等关键词，进一步我们还会想到 buffer、模块机制、事件循环、进程、V8、libuv 等知识点。本文起初旨在理顺 Node.js 以上易混淆概念，然而一入异步深似海，本文尝试基于 Node.js 的异步展开讨论，其他的主题只能日后慢慢补上了。(附：亦可以把本文当作是朴灵老师所著的《深入浅出 Node.js》一书的小结)。\n\n<!-- more -->\n\n## 异步 I/O\n\nNode.js 正是依靠构建了一套完善的高性能异步 I/O 框架，从而打破了 JavaScript 在服务器端止步不前的局面。\n\n### 异步 I/O VS 非阻塞 I/O\n听起来异步和非阻塞，同步和阻塞是相互对应的，从实际效果而言，异步和非阻塞都达到了我们并行 I/O 的目的，但是从计算机内核 I/O 而言，异步/同步和阻塞/非阻塞实际上是两回事。\n\n注意，操作系统内核对于 I/O 只有两种方式：阻塞与非阻塞。\n\n调用阻塞 I/O 的过程：\n\n![](http://oqhtscus0.bkt.clouddn.com/886fcdd67d943f63951b0e3bb6dd6e43.jpg-200)\n\n调用非阻塞 I/O 的过程：\n\n![](http://oqhtscus0.bkt.clouddn.com/38f95c2e0b80e6edb511cf32b8973b90.jpg-200)\n\n在此先引人一个叫作`轮询`的技术。轮询不同于回调，举个生活例子，你有事去隔壁寝室找同学，发现人不在，你怎么办呢？方法1，每隔几分钟再去趟隔壁寝室，看人在不；方法2，拜托与他同寝室的人，看到他回来时叫一下你；那么前者是轮询，后者是回调。\n\n再回到主题，阻塞 I/O 造成 CPU 等待浪费，非阻塞 I/O 带来的麻烦却是需要轮询去确认是否完全完成数据获取。`从操作系统的这个层面上看，对于应用程序而言，不管是阻塞 I/O 亦或是 非阻塞 I/O，它们都只能是一种同步`，因为尽管使用了轮询技术，应用程序仍然需要等待 I/O 完全返回。\n\n### Node 的异步 I/O\n\n完成整个异步 I/O 环节的有事件循环、观察者、请求对象以及 I/O 线程池。\n\n![](http://oqhtscus0.bkt.clouddn.com/34ce4a4c1e2f298811565f15cd2318be.jpg-300)\n\n\n#### 事件循环\n\n在进程启动的时候，Node 会创建一个类似于 whlie(true) 的循环，每一次执行循环体的过程我们称为 Tick。\n\n每个 Tick 的过程就是查看是否有事件待处理，如果有，就取出事件及其相关的回调函数。如果存在相关的回调函数，就执行他们。然后进入下一个循环，如果不再有事件处理，就退出进程。\n\n伪代码如下：\n```js\nwhile(ture) {\n  const event = eventQueue.pop()\n  if (event && event.handler) {\n    event.handler.execute()  // execute the callback in Javascript thread\n  } else {\n    sleep() // sleep some time to release the CPU do other stuff\n  }\n}\n```\n\n#### 观察者\n\n每个 Tick 的过程中，如何判断是否有事件需要处理，这里就需要引入观察者这个概念。\n\n每个事件循环中有一个或多个观察者，而判断是否有事件需要处理的过程就是向这些观察者询问是否有要处理的事件。\n\n在 Node 中，事件主要来源于网络请求、文件 I/O 等，这些事件都有对应的观察者。\n\n#### 请求对象\n\n对于 Node 中的异步 I/O 而言，回调函数不由开发者来调用，在 JavaScript 发起调用到内核执行完 id 操作的过渡过程中，存在一种中间产物，它叫作请求对象。\n\n> 请求对象是异步 I/O 过程中的重要中间产物，所有状态都保存在这个对象中，包括送入线程池等待执行以及 I/O 操作完后的回调处理\n\n以 `fs.open()` 为例：\n```js\nfs.open = function(path, flags, mode, callback) {\n  bingding.open(\n    pathModule._makeLong(path),\n    stringToFlags(flags),\n    mode,\n    callback\n  )\n}\n```\n\n`fs.open` 的作用就是根据指定路径和参数去打开一个文件，从而得到一个文件描述符。\n\n从前面的代码中可以看到，JavaScript 层面的代码通过调用 C++ 核心模块进行下层的操作。\n\n从 JavaScript 调用 Node 的核心模块，核心模块调用 C++ 内建模块，内建模块通过 libuv 进行系统调用，这是 Node 里经典的调用方式。\n\nlibuv 作为封装层，有两个平台的实现，实质上是调用了 uv_fs_open 方法，在 uv_fs_open 的调用过程中，会创建一个 FSReqWrap 请求对象，从 JavaScript 层传入的参数和当前方法都被封装在这个请求对象中。回调函数则被设置在这个对象的 oncomplete_sym 属性上。\n\n```c++\nreq_wrap -> object_ -> Set(oncomplete_sym, callback)\n```\n\n对象包装完毕后，在 Windows 下，则调用 QueueUserWorkItem() 方法将这个 FSReqWrap 对象推人线程池中等待执行。\n\n至此，JavaScript 调用立即返回，由 JavaScript 层面发起的异步调用的第一阶段就此结束(即上图所注释的异步 I/O 第一部分)。JavaScript 线程可以继续执行当前任务的后续操作，当前的 I/O 操作在线程池中等待执行，不管它是否阻塞 I/O，都不会影响到 JavaScript 线程的后续操作，如此达到了异步的目的。\n\n#### 执行回调\n\n组装好请求对象、送入 I/O 线程池等待执行，实际上是完成了异步 I/O 的第一部分，回调通知是第二部分。\n\n线程池中的 I/O 操作调用完毕之后，会将获取的结果储存在 `req -> result` 属性上，然后调用 `PostQueuedCompletionStatus()` 通知 `IOCP`，告知当前对象操作已经完成，并将线程归还线程池。\n\n在这个过程中，我们动用了事件循环的 I/O 观察者，在每次 `Tick` 的执行过程中，它会调用 `IOCP` 相关的 `GetQueuedCompletionStatus` 方法检查线程池中是否有执行完的请求，如果存在，会将请求对象加入到 I/O 观察者的队列中，然后将其当做事件处理。\n\nI/O 观察者回调函数的行为就是取出请求对象的 `result` 属性作为参数，取出 `oncomplete_sym` 属性作为方法，然后调用执行，以此达到调用 JavaScript 中传入的回调函数的目的。\n\n#### 小结\n\n通过介绍完整个异步 I/O 后，有个需要重视的观点是 JavaScript 是单线程的，`Node 本身其实是多线程的`，只是 I/O 线程使用的 CPU 比较少；还有个重要的观点是，除了用户的代码无法并行执行外，所有的 I/O (磁盘 I/O 和网络 I/O) 则是可以并行起来的。\n\n## 异步编程\n\nNode 是首个将异步大规模带到应用层面的平台。通过上文所述我们了解了 Node 如何通过事件循环实现异步 I/O，有异步 I/O 必然存在异步编程。异步编程的路经历了太多坎坷，从回调函数、发布订阅模式、Promise 对象，到 generator、asycn/await。趁着异步编程这个主题刚好把它们串起来理理。\n\n### 异步 VS 回调\n对于刚接触异步的新人，很大几率会混淆回调 (callback) 和异步 (asynchronous) 的概念。先来看看维基的 [Callback](https://en.wikipedia.org/wiki/Callback_(computer_programming)) 条目:\n\n> In computer programming, a callback is any executable code that is passed as an argument to other code\n\n因此，回调本质上是一种设计模式，并且 jQuery (包括其他框架)的设计原则遵循了这个模式。\n\n在 JavaScript 中，回调函数具体的定义为：函数 A 作为参数(函数引用)传递到另一个函数 B 中，并且这个函数 B 执行函数 A。我们就说函数 A 叫做回调函数。如果没有名称(函数表达式)，就叫做匿名回调函数。\n\n因此 callback 不一定用于异步，一般同步(阻塞)的场景下也经常用到回调，比如要求执行某些操作后执行回调函数。讲了这么多让我们来看下同步回调和异步回调的例子：\n\n同步回调：\n```js\nfunction f2() {\n  console.log('f2 finished')\n}\n\nfunction f1(cb) {\n  cb()\n  console.log('f1 finished')\n}\n\nf1(f2)  // 得到的结果是 f2 finished, f1 finished\n```\n\n异步回调：\n```js\nfunction f2() {\n  console.log('f2 finished')\n}\n\nfunction f1(cb) {\n  setTimeout(cb, 1000) // 通过 setTimeout() 来模拟耗时操作\n  console.log('f1 finished')\n}\n\nf1(f2)  // 得到的结果是 f1 finished, f2 finished\n```\n![](http://oqhtscus0.bkt.clouddn.com/43197a40f5c53e8a248f5c8de68e1e81.jpg-200)\n\n小结：回调可以进行同步也可以异步调用，但是 Node.js 提供的 API 大多都是异步回调的，比如 buffer、http、cluster 等模块。\n\n### 发布/订阅模式\n\n事件发布/订阅模式 (PubSub) 自身并无同步和异步调用的问题，但在 Node 的 events 模块的调用中多半伴随事件循环而异步触发的，所以我们说事件发布/订阅广泛应用于异步编程。它的应用非常广泛，可以在异步编程中帮助我们完成更松的解耦，甚至在 MVC、MVVC 的架构中以及设计模式中也少不了发布-订阅模式的参与。\n\n以 jQuery 事件监听为例\n\n```js\n$('#btn').on('myEvent', function(e) {  // 触发事件\n  console.log('I am an Event')\n})\n\n$('#btn').trigger('myEvent')           // 订阅事件\n```\n\n可以看到，订阅事件就是一个高阶函数的应用。事件发布/订阅模式可以实现一个事件与多个回调函数的关联，这些回调函数又称为事件侦听器。下面我们来看看发布/订阅模式的简易实现。\n\n```js\nvar PubSub = function() {\n  this.handlers = {}\n}\n\nPubSub.prototype.subscribe = function(eventType, handler) { // 注册函数逻辑\n  if (!(eventType in this.handlers)) {\n    this.handlers[eventType] = []\n  }\n  this.handlers[eventType].push(handler)  // 添加事件监听器\n  return this // 返回上下文环境以实现链式调用\n}\n\nPubSub.prototype.publish = function(eventType) {  // 发布函数逻辑\n  var _args = Array.prototype.slice.call(arguments, 1)\n  for (var i = 0, _handlers = this.handlers[eventType]; i < _handlers.length; i++) {  // 遍历事件监听器\n    _handlers[i].apply(this, _args) // 调用事件监听器\n  }\n}\n\nvar event = new PubSub // 构造 PubSub 实例\n\nevent.subscribe('name', function(msg) {\n  console.log('my name is ' + msg)  // my name is muyy\n})\n\nevent.publish('name', 'muyy')\n```\n\n至此，一个简易的订阅发布模式就实现了。然而发布/订阅模式也存在一些缺点，创建订阅本身会消耗一定的时间与内存，也许当你订阅一个消息之后，之后可能就不会发生。发布-订阅模式虽然它弱化了对象与对象之间的关系，但是如果过度使用，对象与对象的必要联系就会被深埋，会导致程序难以跟踪与维护。\n\n### Promise/Deferred 模式\n\n想象一下，如果某个操作需要经过多个非阻塞的 IO 操作，每一个结果都是通过回调，程序有可能会看上去像这个样子。这样的代码很难维护。这样的情况更多的会发生在 server side 的情况下。代码片段如下：\n\n```js\noperation1(function(err, result1) {\n  operation2(result1, function(err, result2) {\n    operation3(result2, function(err, result3) {\n      operation4(result3, function(err, result4) {\n        callback(result4) // do something useful\n      })\n    })\n  })\n})\n```\n\n这时候，Promise 出现了，其出现的目的就是为了解决所谓的回调地狱的问题。让我们看下使用 Promise 后的代码片段：\n\n```js\npromise()\n  .then(operation1)\n  .then(operation2)\n  .then(operation3)\n  .then(operation4)\n  .then(function(value4) {\n    // Do something with value4\n  }, function (error) {\n    // Handle any error from step1 through step4\n  })\n  .done()\n```\n\n可以看到，使用了第二种编程模式后能极大地提高我们的编程体验，接着就让我们自己动手实现一个支持序列执行的 Promise。(附：为了直观的在浏览器上也能感受到 Promise，为此也写了一段[浏览器上的 Promise 用法示例](https://github.com/MuYunyun/demos-of-node.js/blob/master/promise/browser.js))\n\n在此之前，我们先要了解 Promise/A 提议中对单个异步操作所作的抽象定义，定义具体如下所示：\n\n* Promise 操作只会处在 3 种状态的一种：未完成态、完成态和失败态。\n* Promise 的状态只会出现从未完成态向完成态或失败态转化，不能逆反。完成态和失败态不能相互转化。\n* Promise 的状态一旦转化，将不能被更改。\n\nPromise 的状态转化示意图如下：\n\n![](http://oqhtscus0.bkt.clouddn.com/e1a0c15c44f9b014aa78d7b7620db474.jpg-200)\n\n除此之外，Promise 对象的另一个关键就是需要具备 then() 方法，对于 then() 方法，有以下简单的要求:\n\n* 接受完成态、错误态的回调方法。在操作完成或出现错误时，将会调用对应方法。\n* 可选地支持 progress 事件回调作为第三个方法。\n* then() 方法只接受 function 对象，其余对象将被忽略。\n* then() 方法继续返回 Promise 对象，已实现链式调用。\n\nthen() 方法的定义如下：\n```js\nthen(fulfilledHandler, errorHandler, progressHandler)\n```\n\n有了这些核心知识，接着进入 Promise/Deferred 核心代码环节：\n\n```js\nvar Promise = function() { // 构建 Promise 对象\n  // 队列用于存储执行的回调函数\n  this.queue = []\n  this.isPromise = true\n}\n\nPromise.prototype.then = function (fulfilledHandler, errorHandler, progressHandler) { // 构建 Progress 的 then 方法\n  var handler = {}\n  if (typeof fulfilledHandler === 'function') {\n    handler.fulfilled = fulfilledHandler\n  }\n  if (typeof errorHandler === 'function') {\n    handler.error = errorHandler\n  }\n  this.queue.push(handler)\n  return this\n}\n```\n\n如上 Promise 的代码就完成了，但是别忘了 Promise/Deferred 中的后者 Deferred，为了完成 Promise 的整个流程，我们还需要触发执行上述回调函数的地方，实现这些功能的对象就叫作 Deferred，即延迟对象。\n\nPromise 和 Deferred 的整体关系如下图所示，从中可知，Deferred 主要用于内部来维护异步模型的状态；而 Promise 则作用于外部，通过 then() 方法暴露给外部以添加自定义逻辑。\n\n![](http://oqhtscus0.bkt.clouddn.com/f461de8674e1268ec19470534a07320a.jpg-400)\n\n接着来看 Deferred 代码部分的实现：\n\n```js\nvar Deferred = function() {\n  this.promise = new Promise()\n}\n\n// 完成态\nDeferred.prototype.resolve = function(obj) {\n  var promise = this.promise\n  var handler\n  while(handler = promise.queue.shift()) {\n    if (handler && handler.fulfilled) {\n      var ret = handler.fulfilled(obj)\n      if (ret && ret.isPromise) { // 这一行以及后面3行的意思是：一旦检测到返回了新的 Promise 对象，停止执行，然后将当前 Deferred 对象的 promise 引用改变为新的 Promise 对象，并将队列中余下的回调转交给它\n        ret.queue = promise.queue\n        this.promise = ret\n        return\n      }\n    }\n  }\n}\n\n// 失败态\nDeferred.prototype.reject = function(err) {\n  var promise = this.promise\n  var handler\n  while (handler = promise.queue.shift()) {\n    if (handler && handler.error) {\n      var ret = handler.error(err)\n      if (ret && ret.isPromise) {\n        ret.queue = promise.queue\n        this.promise = ret\n        return\n      }\n    }\n  }\n}\n\n// 生成回调函数\nDeferred.prototype.callback = function() {\n  var that = this\n  return function(err, file) {\n    if(err) {\n      return that.reject(err)\n    }\n    that.resolve(file)\n  }\n}\n```\n\n接着我们以两次文件读取作为例子，来验证该设计的可行性。这里假设第二个文件读取依赖于第一个文件中的内容，相关代码如下：\n\n```js\nvar readFile1 = function(file, encoding) {\n  var deferred = new Deferred()\n  fs.readFile(file, encoding, deferred.callback())\n  return deferred.promise\n}\n\nvar readFile2 = function(file, encoding) {\n  var deferred = new Deferred()\n  fs.readFile(file, encoding, deferred.callback())\n  return deferred.promise\n}\n\nreadFile1('./file1.txt', 'utf8').then(function(file1) { // 这里通过 then 把两个回调存进队列中\n  return readFile2(file1, 'utf8')\n}).then(function(file2) {\n  console.log(file2)   // I am file2.\n})\n```\n\n最后可以看到控制台输出 `I am file2`，验证成功~，这个案例的完整代码可以[点这里查看](https://github.com/MuYunyun/demos-of-node.js/blob/master/promise/sequence.js)，并建议使用 [node-inspector](https://github.com/node-inspector/node-inspector) 进行断点观察，(这段代码里面有些逻辑确实很绕，通过断点调试就能较容易理解了)。\n\n从 Promise 链式调用可以清晰地看到队列(先进先出)的知识，其有如下两个核心步骤：\n\n* 将所有的回调都存到队列中；\n* Promise 完成时，逐个执行回调，一旦检测到返回了新的 Promise 对象，停止执行，然后将当前 Deferred 对象的 promise 引用改变为新的 Promise 对象，并将队列中余下的回调转交给它；\n\n至此，实现了 Promise/Deferred 的完整逻辑，Promise 的其他知识未来也会继续探究。\n\n### Generator\n\n尽管 Promise 一定程度解决了回调地狱的问题，但是对于喜欢简洁的程序员来说，一大堆的模板代码 `.then(data => {...})` 显得不是很友好。所以爱折腾的开发者们在 ES6 中引人了 Generator 这种数据类型。仍然以读取文件为例，先上一段非常简洁的 Generator + co 的代码：\n\n```js\nco(function* () {\n  const file1 = yield readFile('./file1.txt')\n  const file2 = yield readFile('./file2.txt')\n  console.log(file1)\n  console.log(file2)\n})\n```\n\n可以看到比 Promise 的写法简洁了许多。后文会给出 co 库的实现原理。在此之前，先归纳下什么是 Generator。可以把 Generator 理解为一个可以遍历的状态机，调用 next 就可以切换到下一个状态，其最大特点就是可以交出函数的执行权（即暂停执行），让我们看如下代码：\n\n```js\nfunction* gen(x) {\n  yield (function() {return 1})()\n  var y = yield x + 2\n  return y\n}\n\n// 调用方式一\nvar g = gen(1)\ng.next()  // { value: 1, done: false }\ng.next()  // { value: 3, done: false }\ng.next()  // { value: undefined, done: true }\n\n// 调用方式二\nvar g = gen(1)\ng.next()  // { value: 1, done: false }\ng.next()  // { value: 3, done: false }\ng.next(10)  // { value: 10, done: true }\n```\n\n由此我们归纳下 Generator 的基础知识：\n\n1. Generator 生成迭代器后，等待迭代器的 `next()` 指令启动。\n1. 启动迭代器后，代码会运行到 `yield` 处停止。并返回一个 {value: AnyType, done: Boolean} 对象，value 是这次执行的结果，done 是迭代是否结束。并等待下一次的 next() 指令。\n1. next() 再次启动，若 done 的属性不为 true，则可以继续从上一次停止的地方继续迭代。\n1. 一直重复 2，3 步骤，直到 done 为 true。\n1. 通过调用方式二，我们可看到 next 方法可以带一个参数，该参数就会被当作`上一个 yield 语句的返回值`。\n\n另外我们注意到，上述代码中的第一种调用方式中的 y 值是 undefined，如果我们真想拿到 y 值，就需要通过 `g.next(); g.next().value` 这种方式取出。可以看出，Generator 函数将异步操作表示得很简洁，但是流程管理却不方便。这时候用于 Generator 函数的自动执行的 [co 函数库](https://github.com/tj/co/blob/master/index.js) 登场了。为什么 co 可以自动执行 Generator 函数呢？我们知道，Generator 函数就是一个异步操作的容器。它的自动执行需要一种机制，当异步操作有了结果，能够自动交回执行权。\n\n两种方法可以做到这一点：\n\n* Thunk 函数。将异步操作包装成 Thunk 函数，在回调函数里面交回执行权。\n* Promise 对象。将异步操作包装成 Promise 对象，用 then 方法交回执行权。\n\nco 函数库其实就是将两种自动自动执行器(Thunk 函数和 Promise 对象)，包装成一个库。使用 co 的前提条件是，`Generator 函数的 yield 命令后面，只能是 Thunk 函数或者是 Promise 对象`。下面分别用以上两种方法对 co 进行一个简单的实现。\n\n#### 基于 Thunk 函数的自动执行\n\n在 JavaScript 中，Thunk 函数就是指将多参数函数替换成单参数的形式，并且其只接受回调函数作为参数的函数。Thunk 函数的例子如下：\n\n```js\n// 正常版本的 readFile(多参数)\nfs.readFile(filename, 'utf8', callback)\n\n// Thunk 版本的 readFile(单参数)\nfunction readFile(filename) {\n    return function(callback) {\n        fs.readFile(filename, 'utf8', callback);\n    };\n}\n```\n\n在基于 Thunk 函数和 Generator 的知识上，接着我们来看看 co 基于 Thunk 函数的实现。(附：代码参考自[co最简版实现](https://cnodejs.org/topic/53474cd19e21582e740117df))\n\n```js\nfunction co(generator) {\n  return function(fn) {\n    var gen = generator()\n    function next(err, result) {\n      if(err) {\n        return fn(err)\n      }\n      var step = gen.next(result)\n      if (!step.done) {\n        step.value(next) // 这里可以把它联想成递归；将异步操作包装成 Thunk 函数，在回调函数里面交回执行权。\n      } else {\n        fn(null, step.value)\n      }\n    }\n    next()\n  }\n}\n```\n\n用法如下：\n```js\nco(function* () {  // 把 function*() 作为参数 generator 传入 co 函数\n  var file1 = yield readFile('./file1.txt')\n  var file2 = yield readFile('./file2.txt')\n\n  console.log(file1) // I'm file1\n  console.log(file2) // I'm file2\n  return 'done'\n})(function(err, result) {  // 这部分的 function 作为 co 函数内的 fn 的实参传入\n  console.log(result) // done\n})\n```\n\n上述部分关键代码已进行注释，下面对 co 函数里的几个难点进行说明：\n\n* `var step = gen.next(result)`, 前文提到的一句话在这里就很有用处了：`next方法可以带一个参数，该参数就会被当作上一个yield语句的返回值`;在上述代码的运行中一共会经过这个地方 3 次，result 的值第一次是空值，第二次是 file1.txt 的内容 I'm file1，第三次是 file2.txt 的内容 I'm file2。根据上述关键语句的提醒，所以第二次的内容会作为 file1 的值(当作上一个yield语句的返回值)，同理第三次的内容会作为 file2 的值。\n* 另一处是 `step.value(next)`, step.value 就是前面提到的 thunk 函数返回的 function(callback) {}, next 就是传入 thunk 函数的 callback。这句代码是条递归语句，是这个简易版 co 函数能自动调用 Generator 的关键语句。\n\n建议亲自跑一遍代码，多打断点，从而更好地理解，代码已上传[github](https://github.com/MuYunyun/demos-of-node.js/blob/master/generator/thunk.js)。\n\n#### 基于 Promise 对象的自动执行\n\n基于 Thunk 函数的自动执行中，yield 后面需跟上 Thunk 函数，在基于 Promise 对象的自动执行中，yield 后面自然要跟 Promise 对象了，让我们先构建一个 readFile 的\n Promise 对象：\n\n```js\nfunction readFile(fileName) {\n  return new Promise(function(resolve, reject) {\n    fs.readFile(fileName, function(error, data) {\n      if (error) reject(error)\n      resolve(data)\n    })\n  })\n}\n```\n\n在基于前文 Promise 对象和 Generator 的知识上，接着我们来看看 co 基于 Promise 函数的实现:\n\n```js\nfunction co(generator) {\n  var gen = generator()\n\n  function next(data) {\n    var result = gen.next(data) // 同上，经历了 3 次，第一次是 undefined，第二次是 I'm file1，第三次是 I'm file2\n    if (result.done) return result.value\n    result.value.then(function(data) { // 将异步操作包装成 Promise 对象，用 then 方法交回执行权\n      next(data)\n    })\n  }\n  next()\n}\n```\n\n用法如下：\n```js\nco(function* generator() {\n  var file1 = yield readFile('./file1.txt')\n  var file2 = yield readFile('./file2.txt')\n\n  console.log(file1.toString())  // I'm file1\n  console.log(file2.toString())  // I'm file2\n})\n```\n\n这一部分的代码上传在[这里](https://github.com/MuYunyun/demos-of-node.js/blob/master/generator/promiseGen.js)，通过观察可以发现基于 Thunk 函数和基于 Promise 对象的自动执行方案的 co 函数设计思路几乎一致，也因此呼应了它们共同的本质 —— 当异步操作有了结果，自动交回执行权。\n\n### async\n\n看上去 Generator 已经足够好用了，但是使用 Generator 处理异步必须得依赖 tj/co，于是 asycn 出来了。本质上 async 函数就是 Generator 函数的语法糖，这样说是因为 async 函数的实现，就是将 Generator 函数和自动执行器，包装进一个函数中。伪代码如下，(注：其中 automatic 的实现可以参考 [async 函数的含义和用法](http://www.ruanyifeng.com/blog/2015/05/async.html)中的实现)\n\n```js\nasync function fn(args){\n  // ...\n}\n\n// 等同于\n\nfunction fn(args) {\n  return automatic(function*() {  // automatic 函数就是自动执行器，其的实现可以仿照 co 库自动运行方案来实现，这里就不展开了\n    // ...\n  })\n}\n```\n\n接着仍然以上文的读取文件为例，来比较 Generator 和 async 函数的写法差异：\n\n```js\n// Generator\nvar genReadFile = co(function*() {\n  var file1 = yield readFile('./file1.txt')\n  var file2 = yield readFile('./file2.txt')\n})\n\n// 改用 async 函数\nvar asyncReadFile = async function() {\n  var file1 = await readFile('./file1.txt')\n  var file2 = await 1  // 等同于同步操作（如果跟上原始类型的值）\n}\n```\n\n总体来说 async/await 看上去和使用 co 库后的 generator 看上去很相似，不过相较于 Generator，可以看到 Async 函数更优秀的几点：\n\n* 内置执行器。Generator 函数的执行必须依靠执行器，而 Aysnc 函数自带执行器，调用方式跟普通函数的调用一样；\n* 更好的语义。async 和 await 相较于 * 和 yield 更加语义化；\n* 更广的适用性。前文提到的 co 模块约定，yield 命令后面只能是 Thunk 函数或 Promise 对象，而 async 函数的 await 命令后面则可以是 Promise 或者原始类型的值；\n* 返回值是 Promise。async 函数返回值是 Promise 对象，比 Generator 函数返回的 Iterator 对象方便，因此可以直接使用 then() 方法进行调用；\n\n## 参考资料\n\n* [深入浅出 Node.js](https://github.com/JacksonTian)\n* [理解回调函数](https://segmentfault.com/q/1010000000140970)\n* [JavaScript之异步编程简述](http://blog.codingplayboy.com/2016/01/20/js_async_intro/)\n* [理解co执行逻辑](http://www.html-js.com/article/Nodejs-study-notes-to-understand-co-execution-logic)\n* [co 函数库的含义和用法](http://www.ruanyifeng.com/blog/2015/05/co.html)\n* [async 函数的含义和用法](http://www.ruanyifeng.com/blog/2015/05/async.html)","tags":["Node.js"],"categories":["Node.js"]},{"title":"用 Node.js 把玩一番 Alfred Workflow","url":"%2Fposts%2F4c23be51%2F","content":"![](http://oqhtscus0.bkt.clouddn.com/f27594afeda6b513ffec98c3e60ccbb0.jpg-muyy)\n\n>  [插件地址](https://github.com/MuYunyun/commonSearch)(集成Github、掘金、知乎、淘宝等搜索)\n\n作为 Mac 上常年位居神器榜第一位的软件来说，Alfred 给我们带来的便利是不言而喻的，其中 workflow(工作流) 功不可没，在它上面可以轻松地查找任何 api；可以快速在豆瓣上搜到自己喜欢的电影、图书、音乐；可以快速把图片上传到图床 等等。\n<!--more-->\n\n## 一些安利\n![](http://oqhtscus0.bkt.clouddn.com/482ccbbbcfb8f302851617a86dd6a5de.jpg-400)\n\n附上一张个人装着的插件的截图。Caffeinate 插件能在指定时间使电脑不黑屏；在 Dash 插件上能轻松查任何文档；Youdao Translate 插件比系统自带的翻译方便许多。插件也是因人而异，大家可以在 [Workflow List](http://alfredworkflow.com/) 上逛逛，各取所需。\n\n在用了别人的插件感觉高大上后，便萌发了也写一个插件的想法，计划把自己常逛的网站集合成一个插件，使用特定的缩略词便可快速进行搜索数据，又看了官方称可以使用 bash, zsh, PHP, Ruby, Python, Perl, Apple Script 开发 Alfred Workflow。于是我选择了 Node.js 作为开发语言，开发了一款 [commonSearch](https://github.com/MuYunyun/commonSearch), 开发完效果如下(集成了Github、掘金、知乎、淘宝等搜索)。\n\n![](http://oqhtscus0.bkt.clouddn.com/40a83edf9552b4a071dd2ff5093a445b.gif)\n\n## 开发阶段\n\n在开发前，得先对一些特定的操作步骤和知识点有一定的认知，这样开发时就基本上没有大碍了。\n\n### 前置步骤\n\n可以先参考 [如何去写一个第三方的 workflow](http://allenwu.itscoder.com/how-to-write-a-workflow-for-mac) 的开始部分, 完成基本工作流的搭建，如下图是我搭建好的基本工作流连线。\n\n![](http://oqhtscus0.bkt.clouddn.com/f27594afeda6b513ffec98c3e60ccbb0.jpg-400)\n\n在 Script 中，可以看到 `/usr/local/bin/node common_search.js` 相当于就是在调用该插件的时候起了一个 node 服务，后面的 `1` 是为了区分当前调用的是哪个搜索手动传入 `common_search.js` 的，`{query}` 则是用户查询的名称。\n\n![](http://oqhtscus0.bkt.clouddn.com/39ab06f7fbd80e5723e9abc4b595b930.jpg-400)\n\n### 使用 Node.js 调用 JSON API\n\n最初开发参考了 [知乎搜索](https://github.com/RebeccaHanjw/zhihu_search_alfred_workflow) 这个项目，它是基于 [cheerio](https://github.com/cheeriojs/cheerio) 这个模块对请求到的网页数据进行分析爬取，但是引入了 cheerio 后，插件体积多了 2M 多，这对于一个插件来说太不友好了，所以这可能是 python 之类的语言更适合开发类似插件的原因吧(猜想:python 不需要引人第三方库就能进行爬虫)，于是我开始选择提供 JSON API 的接口，比如找寻掘金返回数据的接口。首先打开 chrome 控制台，这可能对前端工程师比较熟悉了。\n\n![](http://oqhtscus0.bkt.clouddn.com/6151c3ab055e196ac43e63377940bfdb.jpg-muyy)\n\n从而找到了掘金返回搜索数据的接口是  `https://search-merger-ms.juejin.im/v1/search?query={query}&page=0&raw_result=false&src=web`\n\n接着愉快地使用 node 提供的 https 模块，这里有一个注意点，http.get() 回调中的 res 参数不是正文，而是 http.ClientResponse 对象，所以我们需要组装内容。\n\n```js\nvar options = {\n    host: 'search-merger-ms.juejin.im',\n    path: '/v1/search?query=' + encodeURI(keyword) + '&page=0&raw_result=false&src=web'\n  }\n  https.get(options, function (res) {\n    res.on('data', (chunk) => {\n      var content += chunk\n    }).on('end', function () {\n      var jsonContent = JSON.parse(content) && JSON.parse(content).d\n      var result_array = []\n      for (var i = 0; i < jsonContent.length; i++) {\n        if (jsonContent[i].user.jobTitle === '') {\n          result_array.push({\n            title:\n            subtitle:\n            arg:\n            icon: {\n              path: join(__dirname, 'xx.png'),\n            },\n            mods: {\n              cmd: {}\n            }\n          })\n        }\n      }\n      content = ''\n      console.log(JSON.stringify({\n        items: result_array\n      }))\n    })\n  })\n```\n\n这种方法应该是最直接的调用 JSON API 的方案了，当然也可以引人第三方模块 request 后解析 JSON，示例如下：\n\n```js\nvar request = require('request')\n\nvar url = 'search-merger-ms.juejin.im/v1/search?query=' + encodeURI(keyword) + '&page=0&raw_result=false&src=web'\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {'User-Agent': 'request'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log('Error:', err);\n    } else if (res.statusCode !== 200) {\n      console.log('Status:', res.statusCode);\n    } else {\n      // data is already parsed as JSON:\n      console.log(data.html_url);\n    }\n});\n```\n\n还有一点要注意的是返回值的字段是固定的，具体可以参考它的[官方解释](https://www.alfredapp.com/help/workflows/inputs/script-filter/xml/)，琢磨了好久才把 JS 中的 Icon 自定义的格式找出来。\n\n```js\ntitle: 主标题\nsubtitle: 内容行\narg: 跳转链接\nicons: 图标\nmods：定制键盘按键的方法\n```\n\n对于 Github、掘金、知乎、淘宝的搜索都是基于以上思路进行开发的，就是对于具体返回的 JSON 数据进行了不同处理，虽然粗糙，但也算完成了第一个 Alfred Workflow 插件的开发。\n\n## 尾声\n\n本文的知识点写的不是特别丰满，一是就是对开发这个插件的小结，另外就是抛砖引玉了，能让更多的小伙伴了解开发一个插件并不是难事，同时让更多的朋友开发出更多有意义，有趣的 alfred-workflow 插件也算是本文分享的一个初衷了。","tags":["alfred workflow"],"categories":["Node.js"]},{"title":"从 JavaScript 到 TypeScript","url":"%2Fposts%2F66a54fc2%2F","content":"![](http://oqhtscus0.bkt.clouddn.com/5e7b640325806920160f538d7c50f5d7.jpg-muyy)\n> 文中的案例代码已经上传到 [TypeScript](https://github.com/MuYunyun/TypeScript)\n\nTypeScript 并不是一个完全新的语言, 它是 JavaScript 的超集，为 JavaScript 的生态增加了类型机制，并最终将代码编译为纯粹的 JavaScript 代码。\n<!--more-->\n## TypeScript 简介\n\nTypeScript 由 Microsoft(算上 Angular 2 的话加上 Google)开发和维护的一种开源编程语言。 它支持 JavaScript 的所有语法和语义，同时通过作为 ECMAScript 的超集来提供一些额外的功能，如类型检测和更丰富的语法。下图显示了 TypeScript 与 ES5，ES2015，ES2016 之间的关系。\n\n![](http://oqhtscus0.bkt.clouddn.com/da62039bf146c2ebd615ef1d11a1a808.jpg)\n\n## 使用 TypeScript 的原因\nJavaScript 是一门弱类型语言，变量的数据类型具有动态性，只有执行时才能确定变量的类型，这种后知后觉的认错方法会让开发者成为调试大师，但无益于编程能力的提升，还会降低开发效率。TypeScript 的类型机制可以有效杜绝由变量类型引起的误用问题，而且开发者可以控制对类型的监控程度，是严格限制变量类型还是宽松限制变量类型，都取决于开发者的开发需求。添加类型机制之后，副作用主要有两个：增大了开发人员的学习曲线，增加了设定类型的开发时间。总体而言，这些付出相对于代码的健壮性和可维护性，都是值得的。\n\n此外，类型注释是 TypeScript 的内置功能之一，允许文本编辑器和 IDE 可以对我们的代码执行更好的静态分析。 这意味着我们可以通过自动编译工具的帮助，在编写代码时减少错误，从而提高我们的生产力。\n\n对 TypeScript 的简介到此，接下来对其特有的知识点进行简单概括总结，(网上很多教程实际上把 ES6， ES7 的知识点也算进 ts 的知识点了，当然这没错~)\n\n## 数据类型\n\n### String 类型\n一个保存字符串的文本，类型声明为 string。可以发现类型声明可大写也可小写，后文同理。\n```ts\nlet name: string = 'muyy'\nlet name2: String = 'muyy'\n```\n\n### Boolen 类型\nboolean是 true 或 false 的值，所以 `let isBool3: boolean = new Boolean(1)` 就会编译报错，因为 new Boolean(1) 生成的是一个 Bool 对象。\n```ts\nlet isBool1: boolean = false\n```\n\n### Number 类型\n```ts\nlet number: number = 10;\n```\n\n### Array 类型\n数组是 Array 类型。然而，因为数组是一个集合，我们还需要指定在数组中的元素的类型。我们通过 `Array<type>` or `type[]` 语法为数组内的元素指定类型\n```ts\nlet arr:number[] = [1, 2, 3, 4, 5];\nlet arr2:Array<number> = [1, 2, 3, 4, 5];\n\nlet arr3:string[] = [\"1\",\"2\"];\nlet arr4:Array<string> = [\"1\",\"2\"];\n```\n\n### Enums 类型\n列出所有可用值，一个枚举的默认初始值是0。你可以调整一开始的范围：\n```ts\nenum Role {Employee = 3, Manager, Admin}\nlet role: Role = Role.Employee\nconsole.log(role) // 3\n```\n\n### Any 类型\nany 是默认的类型，其类型的变量允许任何类型的值：\n```ts\nlet notSure:any = 10;\nlet notSure2:any[] = [1,\"2\",false];\n```\n\n### Void 类型\nJavaScript 没有空值 Void 的概念，在 TypeScirpt 中，可以用 void 表示没有任何返回值的函数：\n```ts\nfunction alertName(): void {\n  console.log('My name is muyy')\n}\n```\n\n## 函数\n### 为函数定义类型\n我们可以给每个参数添加类型之后再为函数本身添加返回值类型。 TypeScript能够根据返回语句自动推断出返回值类型，因此我们通常省略它。下面函数 add, add2, add3 的效果是一样的，其中是 add3 函数是函数完整类型。\n```ts\nfunction add(x: string, y: string): string{\n    return \"Hello TypeScript\";\n}\n\nlet add2 = function(x: string, y: string): string{\n    return \"Hello TypeScript\";\n}\n\nlet add3: (x: string, y: string) => string = function(x: string, y: string): string{\n    return \"Hello TypeScript\";\n}\n```\n\n### 可选参数和默认参数\n\nJavaScript 里，每个参数都是可选的，可传可不传。 没传参的时候，它的值就是 undefined 。 在 TypeScript 里我们可以在参数名旁使用?实现可选参数的功能。 比如，我们想让 lastname 是可选的：\n```ts\nfunction buildName(firstName: string, lastname?: string){\n    console.log(lastname ? firstName + \"\" + lastname : firstName)\n}\n\nlet res1 = buildName(\"鸣\",\"人\"); // 鸣人\nlet res2 = buildName(\"鸣\"); // 鸣\nlet res3 = buildName(\"鸣\", \"人\", \"君\"); // Supplied parameters do not match any signature of call target.\n```\n如果带默认值的参数出现在必须参数前面，用户必须明确的传入 undefined 值来获得默认值。 例如，我们重写上例子，让 firstName 是带默认值的参数：\n```ts\nfunction buildName2(firstName = \"鸣\", lastName?: string){\n    console.log(firstName + \"\" + lastName)\n}\n\nlet res4 = buildName2(\"人\"); // undefined人\nlet res5 = buildName2(undefined, \"人\"); // 鸣人\n```\n\n## 类\n传统的JavaScript程序使用函数和基于原型的继承来创建可重用的组件，但对于熟悉使用面向对象方式的程序员来讲就有些棘手，因为他们用的是基于类的继承并且对象是由类构建出来的。 从ECMAScript 2015，也就是ECMAScript 6开始，JavaScript程序员将能够使用基于类的面向对象的方式。 使用TypeScript，我们允许开发者现在就使用这些特性，并且编译后的JavaScript可以在所有主流浏览器和平台上运行，而不需要等到下个JavaScript版本。\n\n### 类\n```ts\nclass Person{\n    name:string; // 这个是对后文this.name类型的定义\n    age:number;\n    constructor(name:string,age:number){\n        this.name = name;\n        this.age = age;\n    }\n    print(){\n        return this.name + this.age;\n    }\n}\n\nlet person:Person = new Person('muyy',23)\nconsole.log(person.print()) // muyy23\n```\n我们在引用任何一个类成员的时候都用了 this。 它表示我们访问的是类的成员。其实这本质上还是 ES6 的知识，只是在 ES6 的基础上多上了对 this 字段和引用参数的类型声明。\n\n### 继承\n```ts\nclass Person{\n    public name:string;  // public、private、static 是 typescript 中的类访问修饰符\n    age:number;\n    constructor(name:string,age:number){\n        this.name = name;\n        this.age = age;\n    }\n    tell(){\n        console.log(this.name + this.age);\n    }\n}\n\nclass Student extends Person{\n    gender:string;\n    constructor(gender:string){\n        super(\"muyy\",23);\n        this.gender = gender;\n    }\n    tell(){\n        console.log(this.name + this.age + this.gender);\n    }\n}\n\nvar student = new Student(\"male\");\nstudent.tell();  // muyy23male\n```\n这个例子展示了 TypeScript 中继承的一些特征，可以看到其实也是 ES6 的知识上加上类型声明。不过这里多了一个知识点 —— 公共，私有，以及受保护的修饰符。TypeScript 里，成员默认为 public ；当成员被标记成 private 时，它就不能在声明它的类的外部访问；protected 修饰符与private 修饰符的行为很相似，但有一点不同，protected 成员在派生类中仍然可以访问。\n\n### 存储器\nTypeScript 支持通过 getters/setters 来截取对对象成员的访问。 它能帮助你有效的控制对对象成员的访问。\n\n对于存取器有下面几点需要注意的：\n首先，存取器要求你将编译器设置为输出 ECMAScript 5 或更高。 不支持降级到 ECMAScript 3。 其次，只带有 get 不带有 set 的存取器自动被推断为 readonly。 这在从代码生成 .d.ts 文件时是有帮助的，因为利用这个属性的用户会看到不允许够改变它的值。\n```ts\nclass Hello{\n    private _name: string;\n    private _age: number;\n    get name(): string {\n        return this._name;\n    }\n    set name(value: string) {\n        this._name = value;\n    }\n    get age(): number{\n        return this._age;\n    }\n    set age(age: number) {\n        if(age>0 && age<100){\n            console.log(\"年龄在0-100之间\"); // 年龄在0-100之间\n            return;\n        }\n        this._age = age;\n    }\n}\n\nlet hello = new Hello();\nhello.name = \"muyy\";\nhello.age = 23\nconsole.log(hello.name); // muyy\n```\n\n## 接口\n### 接口\nTypeScript的核心原则之一是对值所具有的结构进行类型检查。在TypeScript里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。\n```ts\ninterface LabelValue{\n    label: string;\n}\n\nfunction printLabel(labelObj: LabelValue){\n    console.log(labelObj.label);\n}\n\nlet myObj = {\n    \"label\":\"hello Interface\"\n};\nprintLabel(myObj);\n```\nLabelledValue 接口就好比一个名字，它代表了有一个 label 属性且类型为 string 的对象。只要传入的对象满足上述必要条件，那么它就是被允许的。\n\n另外，类型检查器不会去检查属性的顺序，只要相应的属性存在并且类型也是对的就可以。\n\n### 可选属性\n带有可选属性的接口与普通的接口定义差不多，只是在可选属性名字定义的后面加一个 ? 符号。可选属性的好处之一是可以对可能存在的属性进行预定义，好处之二是可以捕获引用了不存在的属性时的错误。\n```ts\ninterface Person{\n    name?:string;\n    age?:number;\n}\n\nfunction printInfo(info:Person){\n    console.log(info);\n}\n\nlet info = {\n    \"name\":\"muyy\",\n    \"age\":23\n};\n\nprintInfo(info); // {\"name\": \"muyy\", \"age\": 23}\n\nlet info2 = {\n    \"name\":\"muyy\"\n};\n\nprintInfo(info2); // {\"name\": \"muyy\"}\n```\n\n### 函数类型\n接口能够描述 JavaScript 中对象拥有的各种各样的外形。 除了描述带有属性的普通对象外，接口也可以描述函数类型。定义的函数类型接口就像是一个只有参数列表和返回值类型的函数定义。参数列表里的每个参数都需要名字和类型。定义后完成后，我们可以像使用其它接口一样使用这个函数类型的接口。\n\n```ts\ninterface SearchFunc{\n    (source: string, subString: string): boolean;\n}\n\nlet mySearch: SearchFunc;\nmySearch = function(source: string,subString: string){\n    return source.search(subString) !== -1;\n};\n\nconsole.log(mySearch(\"鸣人\",\"鸣\")); // true\nconsole.log(mySearch(\"鸣人\",\"缨\")); // false\n```\n\n### 可索引类型\n与使用接口描述函数类型差不多，我们也可以描述那些能够“通过索引得到”的类型，比如 `a[10]` 或 `ageMap[\"daniel\"]`。 可索引类型具有一个索引签名，它描述了对象索引的类型，还有相应的索引返回值类型。 让我们看如下例子：\n```ts\ninterface StringArray{\n    [index: number]: string;\n}\n\nlet MyArray: StringArray;\nMyArray = [\"是\",\"云\",\"随\",\"风\"];\nconsole.log(MyArray[2]); // 随\n```\n\n### 类类型\n与 C# 或 Java 里接口的基本作用一样，TypeScript 也能够用它来明确的强制一个类去符合某种契约。\n\n我们可以在接口中描述一个方法，在类里实现它，如同下面的 `setTime` 方法一样：\n```ts\ninterface ClockInterface{\n    currentTime: Date;\n    setTime(d: Date);\n}\n\nclass Clock implements ClockInterface{\n    currentTime: Date;\n    setTime(d: Date){\n        this.currentTime = d;\n    }\n    constructor(h: number, m: number) {}\n}\n```\n\n### 继承接口\n和类一样，接口也可以相互继承。 这让我们能够从一个接口里复制成员到另一个接口里，可以更灵活地将接口分割到可重用的模块里。\n```ts\ninterface Shape{\n    color: string;\n}\n\ninterface PenStroke{\n    penWidth: number;\n}\n\ninterface Square extends Shape,PenStroke{\n    sideLength: number;\n}\n\nlet s = <Square>{};\ns.color = \"blue\";\ns.penWidth = 100;\ns.sideLength = 10;\n```\n\n## 模块\nTypeScript 与 ECMAScript 2015 一样，任何包含顶级 import 或者 export 的文件都被当成一个模块。\n```ts\nexport interface StringValidator{\n    isAcceptable(s:string): boolean;\n}\n\nvar strReg = /^[A-Za-z]+$/;\nvar numReg = /^[0-9]+$/;\n\nexport class letterValidator implements StringValidator{\n    isAcceptable(s:string): boolean{\n        return strReg.test(s);\n    }\n}\n\nexport class zipCode implements StringValidator{\n    isAcceptable(s: string): boolean{\n        return s.length == 5 && numReg.test(s);\n    }\n}\n```\n\n## 泛型\n软件工程中，我们不仅要创建一致的定义良好的 API ，同时也要考虑可重用性。 组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。\n在像 C# 和 Java 这样的语言中，可以使用泛型来创建可重用的组件，一个组件可以支持多种类型的数据。 这样用户就可以以自己的数据类型来使用组件。\n\n### 初探泛型\n如下代码，我们给 Hello 函数添加了类型变量 T ，T 帮助我们捕获用户传入的类型（比如：string）。我们把这个版本的 Hello 函数叫做泛型，因为它可以适用于多个类型。 代码中 `output` 和 `output2` 是效果是相同的，第二种方法更加普遍，利用了类型推论 —— 即编译器会根据传入的参数自动地帮助我们确定T的类型：\n```ts\nfunction Hello<T>(arg:T):T{\n    return arg;\n}\n\nlet outPut = Hello<string>('Hello Generic');\nlet output2 = Hello('Hello Generic')\n\nconsole.log(outPut);\nconsole.log(outPut2);\n```\n\n## 参考资料\n* [TypeScript 中文文档](https://www.gitbook.com/book/zhongsp/typescript-handbook/details)\n* [TypeScript](http://pinggod.com/2016/Typescript/)\n* [TypeScript for Angular 2 - Part 1 (An Introduction)](http://naywinmyint.com/typescript-for-angular-2-part-1/)","tags":["TypeScript"],"categories":["TypeScript"]},{"title":"React 在服务端渲染的实现","url":"%2Fposts%2F2d678a6%2F","content":"![](http://oqhtscus0.bkt.clouddn.com/f82f7765b1171459d9fa593df836c658.jpg-muyy)\n\n> * 原文地址：[Server-Side React Rendering](https://css-tricks.com/server-side-react-rendering/)\n\nReact是最受欢迎的客户端 JavaScript 框架，但你知道吗(可以试试)，你可以使用 React 在服务器端进行渲染？\n<!--more-->\n\n## React 在服务端渲染的实现\n\n假设你已经在客户端使用 React 构建了一个事件列表 app。该应用程序使用了您最喜欢的服务器端工具构建的API。几周后，用户告诉您，他们的页面没有显示在 Google 上，发布到 Facebook 时也显示不出来。 这些问题似乎是可以解决的，对吧？\n\n您会发现，要解决这个问题，需要在初始加载时从服务器渲染 React 页面，以便来自搜索引擎和社交媒体网站的爬虫工具可以读取您的标记。有证据表明，Google 有时会执行 javascript 程序并且对生成的内容进行索引，但并不总是的。因此，如果您希望确保与其他服​​务（如Facebook，Twitter）有良好的SEO兼容性，那么始终建议使用服务器端渲染。\n\n在本教程中，我们将逐步介绍服务器端的呈现示例。包括围绕与API交流的React应用程序的共同路障。\n在本教程中，我们将逐步向您介绍服务器端的渲染示例。包括围绕着 APIS 交流一些在服务端渲染 React 应用程序的共同障碍。\n\n## 服务端渲染的优势\n\n可能您的团队谈论到服务端渲染的好处是首先会想到 SEO，但这并不是唯一的潜在好处。\n\n更大的好处如下：服务器端渲染能更快地显示页面。使用服务器端渲染，您的服务器对浏览器进行响应是在您的 HTML 页面可以渲染的时候，因此浏览器可以不用等待所有的 JavaScript 被下载和执行就可以开始渲染。当浏览器下载并执行页面所需的 JavaScript 和其他资源时，不会出现 “白屏” 现象，而 “白屏” 这是在完全有客户端呈现的 React 网站中可能发生的情况。\n\n## 入门\n\n接下来让我们来看看如何将服务器端渲染添加到一个基本的客户端渲染的使用Babel和Webpack的React应用程序中。我们的应用程序将增加从第三方 API 获取数据的复杂性。我们在GitHub上提供了[相关代码](https://github.com/ButterCMS/react-ssr-example/releases/tag/starter-code)，您可以在其中看到完整的示例。\n\n提供的代码中只有一个 React 组件，\\`hello.js\\`，这个文件将向 [ButterCMS](https://buttercms.com/) 发出异步请求，并渲染返回的 JSON 列表的博文。ButterCMS 是一个基于API的博客引擎，可供个人使用，因此它非常适合测试现实生活中的用例。启动代码中连接着一个 API token，如果你想使用你自己的 API token 可以[使用你的 GitHub 账号登入 ButterCMS](https://buttercms.com/home/)。\n\n``` js\nimport React from 'react';\nimport Butter from 'buttercms'\n\nconst butter = Butter('b60a008584313ed21803780bc9208557b3b49fbb');\n\nvar Hello = React.createClass({\n  getInitialState: function() {\n    return {loaded: false};\n  },\n  componentWillMount: function() {\n    butter.post.list().then((resp) => {\n      this.setState({\n        loaded: true,\n        resp: resp.data\n      })\n    });\n  },\n  render: function() {\n    if (this.state.loaded) {\n      return (\n        <div>\n          {this.state.resp.data.map((post) => {\n            return (\n              <div key={post.slug}>{post.title}</div>\n            )\n          })}\n        </div>\n      );\n    } else {\n      return <div>Loading...</div>;\n    }\n  }\n});\n\nexport default Hello;\n```\n\n启动器代码中包含以下内容：\n- package.json - 依赖项\n- Webpack 和 Babel 配置\n- index.html - app 的 HTML 文件\n- index.js - 加载 React 并渲染 Hello 组件\n\n要使应用运行，请先克隆资源库：\n\n```\ngit clone ...\ncd ..\n```\n\n安装依赖:\n\n```\nnpm install\n```\n\n然后启动服务器:\n\n```\nnpm run start\n```\n\n浏览器输入 http://localhost:8000 可以看到这个 app: (这里译者进行补充，package.json 里的 start 命令改为如下：`\"start\": webpack-dev-server --watch`)\n\n![](https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1000,f_auto,q_auto/v1497358286/localhost_r84tot.png)\n\n如果您查看渲染页面的源代码，您将看到发送到浏览器的标记只是一个到 JavaScript 文件的链接。这意味着页面的内容不能保证被搜索引擎和社交媒体平台抓取:\n\n![](https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1000,f_auto,q_auto/v1497358332/some-html_mrmpfj.png)\n\n## 增加服务器端渲染\n\n接下来，我们将实现服务器端渲染，以便将完全生成的HTML发送到浏览器。如果要同时查看所有更改，请查看[GitHub上的差异](https://github.com/ButterCMS/react-ssr-example/commit/525c625b0f65489050983ed03b52bb7770ce6b7a)。\n\n开始前，让我们安装 Express，一个 Node.js 的服务器端应用程序框架：\n\n```\nnpm install express --save\n```\n\n我们要创建一个渲染我们的 React 组件的服务器：\n\n``` js\nimport express from 'express';\nimport fs from 'fs';\nimport path from 'path';\nimport React from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport Hello from './Hello.js';\n\nfunction handleRender(req, res) {\n  // 把 Hello 组件渲染成 HTML 字符串\n  const html = ReactDOMServer.renderToString(<Hello />);\n\n  // 加载 index.html 的内容\n  fs.readFile('./index.html', 'utf8', function (err, data) {\n    if (err) throw err;\n\n    // 把渲染后的 React HTML 插入到 div 中\n    const document = data.replace(/<div id=\"app\"><\\/div>/, `<div id=\"app\">${html}</div>`);\n\n    // 把响应传回给客户端\n    res.send(document);\n  });\n}\n\nconst app = express();\n\n// 服务器使用 static 中间件构建 build 路径\napp.use('/build', express.static(path.join(__dirname, 'build')));\n\n// 使用我们的 handleRender 中间件处理服务端请求\napp.get('*', handleRender);\n\n// 启动服务器\napp.listen(3000);\n```\n\n让我们分解下程序看看发生了什么事情...\n\n`handleRender` 函数处理所有请求。在文件顶部导入的 [ReactDOMServer 类](https://facebook.github.io/react/docs/react-dom-server.html)提供了将 React 节点渲染成其初始 HTML 的 renderToString() 方法\n``` js\nReactDOMServer.renderToString(<Hello />);\n```\n\n这将返回 Hello 组件的 HTML ，我们将其注入到 index.html 的 HTML 中，从而生成服务器上页面的完整 HTML 。\n\n``` js\nconst document = data.replace(/<div id=\"app\"><\\/div>/,`<div id=\"app\">${html}</div>`);\n```\n\n要启动服务器，请更新 \\`package.json\\` 中的起始脚本，然后运行 `npm run start` :\n\n```\n\"scripts\": {\n  \"start\": \"webpack && babel-node server.js\"\n},\n```\n\n浏览 `http://localhost:3000` 查看应用程序。瞧！您的页面现在正在从服务器渲染出来了。但是有个问题，\n如果您在浏览器中查看页面源码，您会注意到博客文章仍未包含在回复中。这是怎么回事？如果我们在Chrome中打开网络标签，我们会看到客户端上发生API请求。\n\n![](https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1000,f_auto,q_auto/v1497358447/devtools_qx5y1o.png)\n\n虽然我们在服务器上渲染了 React 组件，但是 API 请求在 componentWillMount 中异步生成，并且组件在请求完成之前渲染。所以即使我们已经在服务器上完成渲染，但我们只是完成了部分。事实上，[React repo 有一个 issue](https://github.com/facebook/react/issues/1739)，超过 100 条评论讨论了这个问题和各种解决方法。\n\n## 在渲染之前获取数据\n\n要解决这个问题，我们需要在渲染 Hello 组件之前确保 API 请求完成。这意味着要使 API 请求跳出 React 的组件渲染循环，并在渲染组件之前获取数据。我们将逐步介绍这一步，但您可以在[GitHub上查看完整的差异](https://github.com/ButterCMS/react-ssr-example/commit/5fdd453e31ab08dfdc8b44261696d4ed89fbb719)。\n\n要在渲染之前获取数据，我们需安装 [react-transmit](https://github.com/RickWong/react-transmit)：\n\n```\nnpm install react-transmit --save\n```\n\nReact Transmit 给了我们优雅的包装器组件（通常称为“高阶组件”），用于获取在客户端和服务器上工作的数据。\n\n这是我们使用 react-transmit 后的组件的代码：\n\n``` js\nimport React from 'react';\nimport Butter from 'buttercms'\nimport Transmit from 'react-transmit';\n\nconst butter = Butter('b60a008584313ed21803780bc9208557b3b49fbb');\n\nvar Hello = React.createClass({\n  render: function() {\n    if (this.props.posts) {\n      return (\n        <div>\n          {this.props.posts.data.map((post) => {\n            return (\n              <div key={post.slug}>{post.title}</div>\n            )\n          })}\n        </div>\n      );\n    } else {\n      return <div>Loading...</div>;\n    }\n  }\n});\n\nexport default Transmit.createContainer(Hello, {\n  // 必须设定 initiallVariables 和 ftagments ,否则渲染时会报错\n  initialVariables: {},\n  // 定义的方法名将成为 Transmit props 的名称\n  fragments: {\n    posts() {\n      return butter.post.list().then((resp) => resp.data);\n    }\n  }\n});\n```\n\n我们已经使用 `Transmit.createContainer` 将我们的组件包装在一个高级组件中，该组件可以用来获取数据。我们在 React 组件中删除了生命周期方法，因为无需两次获取数据。同时我们把 render 方法中的 state 替换成 props，因为 React Transmit 将数据作为 props 传递给组件。\n\n为了确保服务器在渲染之前获取数据，我们导入 Transmit 并使用 `Transmit.renderToString` 而不是 `ReactDOM.renderToString` 方法\n\n``` js\nimport express from 'express';\nimport fs from 'fs';\nimport path from 'path';\nimport React from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport Hello from './Hello.js';\nimport Transmit from 'react-transmit';\n\nfunction handleRender(req, res) {\n  Transmit.renderToString(Hello).then(({reactString, reactData}) => {\n    fs.readFile('./index.html', 'utf8', function (err, data) {\n      if (err) throw err;\n\n      const document = data.replace(/<div id=\"app\"><\\/div>/, `<div id=\"app\">${reactString}</div>`);\n      const output = Transmit.injectIntoMarkup(document, reactData, ['/build/client.js']);\n\n      res.send(document);\n    });\n  });\n}\n\nconst app = express();\n\n// 服务器使用 static 中间件构建 build 路径\napp.use('/build', express.static(path.join(__dirname, 'build')));\n\n// 使用我们的 handleRender 中间件处理服务端请求\napp.get('*', handleRender);\n\n// 启动服务器\napp.listen(3000);\n```\n\n重新启动服务器浏览到 `http://localhost：3000`。查看页面源代码，您将看到该页面现在完全呈现在服务器上！\n\n![](https://res.cloudinary.com/css-tricks/image/upload/c_scale,w_1000,f_auto,q_auto/v1497358548/rendered-react_t5neam.png)\n\n## 更进一步\n\n我们做到了！在服务器上使用 React 可能很棘手，尤其是从 API 获取数据时。幸运的是，React社区正在蓬勃发展，并创造了许多有用的工具。如果您对构建在客户端和服务器上渲染的大型 React 应用程序的框架感兴趣，请查看 Walmart Labs 的 [Electrode](https://github.com/electrode-io/electrode) 或 [Next.js](https://github.com/zeit/next.js)。或者如果要在 Ruby 中渲染 React ，请查看 AirBnB 的 [Hypernova](https://github.com/airbnb/hypernova) 。\n\n","tags":["SEO"],"categories":["React"]},{"title":"使用 React 全家桶搭建一个后台管理系统","url":"%2Fposts%2F9bfbdbf4%2F","content":"![](http://oqhtscus0.bkt.clouddn.com/007a8b596b798249ed85d11307c959cb.jpg-muyy)\n\n使用React技术栈搭建一个后台管理系统最初是为了上手公司的业务，后来发现这个项目还能把平时遇到的有趣的demo给整合进去。此文尝试对相关的技术栈以及如何在该项目中引人Redux进行分析。\n<!--more-->\n\n## 项目地址以及局部展示\n* [项目地址](https://github.com/MuYunyun/reactSPA)\n\n* 小模块展示：\n![](http://files.cnblogs.com/files/MuYunyun/reactSPA.gif)\n* redux在项目中的运用demo展示\n![](http://files.cnblogs.com/files/MuYunyun/todoList.gif)\n\n## 项目目录结构\n```\n├── build.js                   项目打包后的文件\n├── config                     webpack配置文件\n│   ├──...\n│   ├──webpack.config.dev.js   开发环境配置\n│   ├──webpack.config.prod.js  生产环境配置\n├── node_modules               node模块目录\n├── public\n│   └──index.html\n├── scripts\n│   ├── build.js               打包项目文件\n│   ├── start.js               启动项目文件\n│   └── test.js                测试项目文件\n├── src\n│   ├── client                 汇聚(入口)目录\n│   ├── common                 核心目录\n│   │   ├── actions            redux中的action\n│   │   ├── components         通用功能组件\n│   │   ├── container          通用样式组件\n│   │   ├── images\n│   │   ├── pages              页面模块\n│   │   ├── reducers           redux中的reducer\n│   │   ├── utils              工具类\n│   │   │   ├── config.js      通用配置\n│   │   │   ├── menu.js        菜单配置\n│   │   │   └── ajax.js        ajax模块(日后用到)\n│   │   └── routes.js          前端路由\n│   └── server                 服务端目录(日后用到)\n│       └── controller\n├── .gitignore\n├── package.json\n├── README.md\n└── yarn.lock\n```\n项目的初始结构和构造原因已罗列如上，由于过些日子会引人ts，所以项目结构必然还会改动，但肯定基于这基本雏形扩展的。\n\n下面对目录结构作以下说明\n* 项目最初始是用 [create-react-app](https://github.com/facebookincubator/create-react-app) 初始化的，create-react-app 是Facebook官方提供的 React 脚手架，也是业界最优秀的 React 应用开发工具之一;\n* client 作为入口目录，到时候可以把第三方中间件也放在此处;\n* container 和 components 存放的都是 react 组件,区别如下表。但是我把和样式有关的组件就放在container中，把和功能有关的模块(比如自己分装的表格组件、弹出输入框组件等)就放到components中，若日后有需要，container 和 component 组件都是可以在 Redux 数据流中的。\n\n|                       |          container          |       component       |\n| :-------------------: | :-------------------------: | :-------------------: |\n|         目的          | 如何工作(数据获取,状态更新) | 如何显示(样式，布局)  |\n| 是否在 Redux 数据流中 |             是              |          否           |\n|       读取数据        |     从 Redux 获取 state     |   从 props 获取数据   |\n|       修改数据        |    向 Redux 派发 actions    | 从 props 调用回调函数 |\n|       实现方式        |      向react-redux生成      |         手写          |\n* ajax 模块到时候计划用 fetch 封装一个ajax，感觉使用 fetch 还是蛮便利的。\n* server 层就是作为网关层，日后计划用来写 node 的。\n\n## 技术栈相关\n虽然用到的技术栈众多，但是自己也谈不上熟练运用，多半是边查API边用的，所以只罗列些自己用相关的技术栈解决的点;\n\n### webpack(2.x)\n4月的时候 create-react-app 还是基于 webpack(1.x) 构建的，5月27号升到了webpack(2.6),于是我也进行了 webpack 的版本升级。\n#### 按需加载\n[babel-plugin-import](https://github.com/ant-design/babel-plugin-import) 是一个用于按需加载组件代码和样式的 babel 插件，使用此插件后，在引人 antd 相应模块就能实现按需引人，在config/webpack.config.dev.js 文件中作如下修改:\n```js\n{\n        test: /\\.(js|jsx)$/,\n        include: paths.appSrc,\n        loader: require.resolve('babel-loader'),\n        options: {\n          plugins: [\n            \"transform-decorators-legacy\",  // 引人 ES7 的装饰器 @\n            ['import', [{ libraryName: 'antd', style: true }]],\n          ],\n          cacheDirectory: true,\n        },\n      },\n```\n#### 引人less\n首先引人 [less-loader](https://github.com/webpack-contrib/less-loader) 来加载 less 样式，同时修改 config/webpack.config.dev.js 文件\n```js\n\n        test: /\\.less$/,\n        use: [\n          require.resolve('style-loader'),\n          require.resolve('css-loader'),\n          {\n            loader: require.resolve('postcss-loader'),\n            options: {\n              ident: 'postcss', //https://webpack.js.org/guides/migrating/#complex-options\n              plugins: () => [\n                require('postcss-flexbugs-fixes'),\n                autoprefixer({\n                  browsers: [\n                    '>1%',\n                    'last 4 versions',\n                    'Firefox ESR',\n                    'not ie < 9', // React doesn't support IE8 anyway\n                  ],\n                  flexbox: 'no-2009',\n                }),\n              ],\n            },\n          },\n          {\n            loader: require.resolve('less-loader'),\n            options: {\n              modifyVars: { \"@primary-color\": \"#1DA57A\" },  // 这里利用了 less-loader 的 modifyVars 来进行主题配置， 变量和其他配置方式可以参考 [配置主题](https://ant.design/docs/react/customize-theme-cn) 文档。\n            },\n          },\n        ],\n      },\n```\n#### 一键发布到 gh-pages\n用到了 [gh-pages](https://github.com/tschaub/gh-pages) ,使用 npm run deploy 一键发布到自己的gh-pages上，姑且把gh-pages当成生产环境吧，所以在修改config/webpack.config.dev.js 文件的同时也要对 config/webpack.config.prod.js 作出一模一样的修改。\n#### 引用路径的缩写\n```js\nalias: {\n      'react-native': 'react-native-web',\n      components: path.resolve(__dirname, '..') + '/src/common/components',\n      container: path.resolve(__dirname, '..') + '/src/common/container',\n      images: path.resolve(__dirname, '..') + '/src/common/images',\n      pages: path.resolve(__dirname, '..') + '/src/common/pages',\n      utils: path.resolve(__dirname, '..') + '/src/common/utils',\n      data: path.resolve(__dirname, '..') + '/src/server/data',\n      actions: path.resolve(__dirname, '..') + '/src/common/actions',\n      reducers: path.resolve(__dirname, '..') + '/src/common/reducers',\n    },\n```\n配置了引用路径的缩写后，就可以在任意地方如这样引用，比如\n```js\nimport Table from 'components/table'\n```\n### Antd(2.x)\nantd是（蚂蚁金服体验技术部）经过大量的项目实践和总结，沉淀出的一个中台设计语言 Ant Design，使用者包括蚂蚁金服、阿里巴巴、口碑、美团、滴滴等一系列知名公司，而且我从他们的[设计理念](https://ant.design/docs/spec/introduce-cn)也学到了很多关于UI、UX的知识。\n该项目采用的是antd最新的版本2.10.0,由于2.x的版本和1.x的版本还是相差蛮大的，之前参考的项目(基于1.x)改起来太费劲，所以在组件那块就干脆自己重新封装了一遍。这部分知识点建议多看文档，官方更新还是非常勤快的。\n### React-router(4.x)\nreact-router 4.x和2.x的差异又是特别的大，召唤[文档](https://reacttraining.com/react-router/web/guides/quick-start),网上基本上都还是2.x的教程，看过文档之后，反正简而言之其就是要让使用者更容易上手。印象最深的是以前嵌套路由写法在4.x中写到同层了。如下示例他们的效果是相同的。\n\n2.x:\n```js\n<Route path=\"/\" component={App}>\n    <Route path=\"/aaaa\" component={AAAA} />\n    <Route path=\"/bbbb\" component={BBBB} />\n</Route>\n```\n4.x:\n```js\n<Route path=\"/\" component={App} />\n<Route path=\"/aaaa\" component={AAAA} />\n<Route path=\"/bbbb\" component={BBBB} />\n```\n\n### Fetch\nfetch 使用比较简单，基本的 promise 用法如下\n```js\nfetch(url).then(response => response.json())\n  .then(data => console.log(data))\n  .catch(e => console.log(\"Oops, error\", e))\n```\n此外还能这样用\n```js\ntry {\n  let response = await fetch(url);\n  let data = await response.json();\n  console.log(data);\n} catch(e) {\n  console.log(\"Oops, error\", e);\n}\n```\n但是其简洁的特点是为了让我们可以自定义其扩展，还是其本身就还不完善呢？我在调用 JSONP 的请求时，发现其不支持对 JSONP 的调用，所幸社区还是很给力地找到了 [fetch-jsonp](https://www.npmjs.com/package/fetch-jsonp) 这个模块，实现了对百度音乐接口调用。fetch-jsonp使用也和 fetch 类似，代码如下\n```js\nfetchJsonp(url,{method: 'GET'})\n　　.then((res) =>res.json())\n　　.then((data) => {})\n```\n\n### Redux\n使用了redux也已经有段时日了，我对redux的定义就是更好的管理组件的状态，一旦应用的逻辑复杂起来，各种组件状态、界面耦合起来，就容易出岔子，redux就是为了解决这个而诞生的，让我们可以更多地关注UI层，而降低对状态的关注。\n\n![](http://oqhtscus0.bkt.clouddn.com/a40c3540ca26a56b28506d14125c04c1.jpg-400)\n\n画了一幅比较简陋的图来说明 redux 的大致流程，假设首先通过鼠标点击页面上的按钮触发了一个行为(action)，这时我们叫了一辆出租车 dispatch() 将这个 action 带到了终点站 store。这时候 store 就会通过 reducer 函数返回一个新的状态 state，从而改变 UI 显示。之前也写了篇[深入Redux架构](http://www.cnblogs.com/MuYunyun/p/6530715.html)\n\n下面通过把 [代办事项](https://github.com/MuYunyun/todoList) 这个demo运用到后台管理系统中来讲解 Redux 在其中的运用。\n\n首先，在入口目录创建 store\n```js\nconst store = createStore(rootReducer)\n\nReactDOM.render(\n  <Provider store={store}>\n    { routes }\n  </Provider>,\n  document.getElementById('root')\n);\n```\n接着，我使用了 [redux-actions](https://github.com/acdlite/redux-actions) 这个模块。使用 redux-actions 的好处是能简化大量对 action 的声明，以及能简化 reducer 的写法。\n\n代办事项的 actions 文件片段(拿展示全部任务、已完成任务、未完成任务的 action 举例):\n```js\nimport { createAction } from 'redux-actions'\n\nexport const setVisibility = createAction('SET_VISIBILITY')\n```\n没使用 redux-actions 时，actions 写法如下，可看出着实麻烦了不少，\n```js\nexport const setVisibility = (filter) => {\n\treturn {\n\t\ttype: \"SET_VISIBILITY\",\n\t\tfilter\n\t}\n}\n```\n相应的代办事项的 reducers 文件片段:\n```js\nexport const setVisibility = handleActions({\n  'SET_VISIBILITY'(state, action) {\n    return { ...state, ...action.payload}\n  }\n}, 'SHOW_ALL')\n```\n使用 redux-actions 后，只要进行如下调用,reducers文件里的`SET_VISIBILITY`的 action 就能捕获到`SHOW_ALL`这个状态。\n```js\nimport { setVisibility } from 'actions/todoList'\n@connect(\n    (state) => ({\n        setVisibility: state.setVisibility, // 这个 setVisibility 是取自 reducers 的\n    })\n)\n\ndispatch(this.props.dispatch(setVisibility('SHOW_ALL')))\n```\nconnect 来自 [react-redux](https://github.com/reactjs/react-redux)，这里的 @ 是 ES7里的装饰器的用法，使用它之后又能减少不少的代码量，原来还要写 `mapStateToProps`、`mapDispatchToProps`。\n\n## 项目的一些扩展计划\n计划在该项目把平时工作、学习中遇到的react案例抽离成demo展现出来，所以以后还会多出一些模块。另外过段时间会在该项目中引人 typescript，如果还有精力的话，可以在这个项目上折腾下网关层。喜欢这个项目的话，[点我 Star](https://github.com/MuYunyun/reactSPA)。\n","tags":["Redux"],"categories":["React"]},{"title":"读书笔记-你不知道的 JavaScript (上)","url":"%2Fposts%2F4a895cbd%2F","content":"![](http://oqhtscus0.bkt.clouddn.com/a56029ee73c05e0f2897e6a1b574dc52.jpg-muyy)\n\n《你不知道的JavaScript》系列丛书给出了很多颠覆以往对JavaScript认知的点, 读完上卷，受益匪浅，于是对其精华的知识点进行了梳理。\n<!--more-->\n\n## 什么是作用域\n作用域是一套规则，用于确定在何处以及如何查找变量。\n### 编译原理\nJavaScript是一门编译语言。在传统编译语言的流程中，程序中一段源代码在执行之前会经历三个步骤，统称为“编译”。\n* 分词/词法分析\n  将字符串分解成有意义的代码块，代码块又称词法单元。比如程序`var a = 2;`会被分解为`var、a、=、2、;`\n* 解析/语法分析\n  将词法单元流转换成一个由元素逐级嵌套所组成的代表了程序语法接口的书，又称“抽象语法树”。\n* 代码生成\n  将抽象语法树转换为机器能够识别的指令。\n\n### 理解作用域\n作用域 分别与编译器、引擎进行配合完成代码的解析\n* 引擎执行时会与作用域进行交流，确定RHS与LHS查找具体变量，如果查找不到会抛出异常。\n* 编译器负责语法分析以及生成代码。\n* 作用域负责收集并维护所有变量组成的一系列查询，并确定当前执行的代码对这些变量的访问权限。\n\n对于 `var a = 2` 这条语句，首先编译器会将其分为两部分，一部分是 `var a`，一部分是 `a = 2`。编译器会在编译期间执行 var a，然后到作用域中去查找 a 变量，如果 a 变量在作用域中还没有声明，那么就在作用域中声明 a 变量，如果 a 变量已经存在，那就忽略 var a 语句。然后编译器会为 a = 2 这条语句生成执行代码，以供引擎执行该赋值操作。所以我们平时所提到的变量提升，无非就是利用这个先声明后赋值的原理而已！\n\n### 异常\n对于 `var a = 10` 这条赋值语句，实际上是为了查找变量 a， 并且将 10 这个数值赋予它，这就是 `LHS` 查询。 对于 `console.log(a)` 这条语句，实际上是为了查找 a 的值并将其打印出来，这是 `RHS` 查询。\n\n为什么区分 `LHS` 和 `RHS` 是一件重要的事情？\n在非严格模式下，LHS 调用查找不到变量时会创建一个全局变量，RHS 查找不到变量时会抛出 ReferenceError。 在严格模式下，LHS 和 RHS 查找不到变量时都会抛出 ReferenceError。\n\n## 作用域的工作模式\n作用域共有两种主要的工作模型。第一种是最为普遍的，被大多数编程语言所采用的词法作用域( JavaScript 中的作用域就是词法作用域)。另外一种是动态作用域，仍有一些编程语言在使用(比如Bash脚本、Perl中的一些模式等)。\n\n### 词法作用域\n词法作用域是一套关于引擎如何寻找变量以及会在何处找到变量的规则。词法作用域最重要的特征是它的定义过程发生在代码的书写阶段(假设没有使用 eval() 或 with )。来看示例代码:\n``` js\nfunction foo() {\n  console.log(a);  // 2\n}\n\nfunction bar() {\n  var a = 3;\n  foo();\n}\n\nvar a = 2;\n\nbar()\n```\n词法作用域让foo()中的a通过RHS引用到了全局作用域中的a，因此会输出2。\n\n### 动态作用域\n而动态作用域只关心它们从何处调用。换句话说，作用域链是基于调用栈的，而不是代码中的作用域嵌套。因此，如果 JavaScript 具有动态作用域，理论上，下面代码中的 foo() 在执行时将会输出3。\n``` js\nfunction foo() {\n  console.log(a);  // 3\n}\n\nfunction bar() {\n  var a = 3;\n  foo();\n}\n\nvar a = 2;\n\nbar()\n```\n\n## 函数作用域\n### 匿名与具名\n对于函数表达式一个最熟悉的场景可能就是回调函数了，比如\n```js\nsetTimeout( function() {\n  console.log(\"I waited 1 second!\")\n}, 1000 )\n```\n这叫作`匿名函数表达式`。函数表达式可以匿名，而函数声明则不可以省略函数名。匿名函数表达式书写起来简单快捷,很多库和工具也倾向鼓励使用这种风格的代码。但它也有几个缺点需要考虑。\n* 匿名函数在栈追踪中不会显示出有意义的函数名,使得调试很困难。\n* 如果没有函数名,当函数需要引用自身时只能使用已经过期的 arguments.callee 引用,比如在递归中。另一个函数需要引用自身的例子,是在事件触发后事件监听器需要解绑自身。\n* 匿名函数省略了对于代码可读性 / 可理解性很重要的函数名。一个描述性的名称可以让代码不言自明。\n\n始终给函数表达式命名是一个最佳实践:\n```js\nsetTimeout( function timeoutHandler() { // 我有名字了\n  console.log(\"I waited 1 second!\")\n}, 1000 )\n```\n\n## 提升\n### 先有声明还是先有赋值\n考虑以下代码：\n``` js\na = 2;\n\nvar a;\n\nconsole.log(a); // 2\n```\n考虑另外一段代码\n``` js\nconsole.log(a); // undefined\n\nvar a = 2;\n```\n我们习惯将 var a = 2; 看作一个声明，而实际上 JavaScript 引擎并不这么认为。它将 var a 和 a = 2 当作两个单独的声明，第一个是编译阶段的任务，而第二个是执行阶段的任务。\n这意味着无论作用域中的声明出现在什么地方，都将在代码本身被执行前首先进行处理。可以将这个过程形象地想象成所有的声明（变量和函数）都会被“移动”到各自作用域的最顶端，这个过程称为提升。\n\n可以看出，先有声明后有赋值。\n\n再来看以下代码：\n``` js\nfoo();  // TypeError\nbar();  // ReferenceError\n\nvar foo = function bar() {\n  // ...\n};\n```\n这个代码片段经过提升后，实际上会被理解为以下形式:\n``` js\nvar foo;\n\nfoo();  // TypeError\nbar();  // ReferenceError\n\nfoo = function() {\n  var bar = ...self...\n  // ...\n};\n```\n这段程序中的变量标识符 foo() 被提升并分配给全局作用域，因此 foo() 不会导致 ReferenceError。但是 foo 此时并没有赋值(如果它是一个`函数声明而不是函数表达式就会赋值`)。foo()由于对 undefined 值进行函数调用而导致非法操作，因此抛出 TypeError 异常。另外即时是具名的函数表达式，名称标识符(这里是 bar )在赋值之前也无法在所在作用域中使用。\n\n## 闭包\n之前写过关于闭包的一篇文章[深入浅出JavaScript之闭包(Closure)](http://www.cnblogs.com/MuYunyun/p/5930703.html)\n### 循环和闭包\n要说明闭包，for 循环是最常见的例子。\n``` js\nfor (var i = 1; i <= 5; i++) {\n  setTimeout( function timer() {\n    console.log(i);\n  }, i*1000 )\n}\n```\n正常情况下，我们对这段代码行为的预期是分别输出数字 1~5，每秒一次，每次一个。但实际上，这段代码在运行时会以每秒一次的频率输出五次6。\n\n它的缺陷在于：根据作用域的工作原理，尽管循环中的五个函数是在各个迭代中分别定义的，但是它们都被封闭在一个共享的全局作用域中，因此实际上只有一个i。因此我们需要更多的闭包作用域。我们知道IIFE会通过声明并立即执行一个函数来创建作用域，我们来进行改进：\n``` js\nfor (var i = 1; i <= 5; i++) {\n  (function() {\n    var j = i;\n    setTimeout( function timer() {\n      console.log(j);\n    }, j*1000 )\n  })();\n}\n```\n还可以对这段代码进行一些改进：\n``` js\nfor (var i = 1; i <= 5; i++) {\n  (function(j) {\n    setTimeout( function timer() {\n      console.log(j);\n    }, j*1000 )\n  })(i);\n}\n```\n在迭代内使用 IIFE 会为每个迭代都生成一个新的作用域，使得延迟函数的回调可以将新的作用域封闭在每个迭代内部，每个迭代中都会含有一个具有正确值的变量供我们访问。\n\n#### 重返块作用域\n我们使用 IIFE 在每次迭代时都创建一个新的作用域。换句话说，每次迭代我们都需要一个块作用域。我们知道 let 声明可以用来劫持块作用域，那我们可以进行这样改：\n``` js\nfor (var i = 1; i <= 5; i++) {\n  let j = i;\n  setTimeout( function timer() {\n    console.log(j);\n  }, j*1000 )\n}\n```\n本质上这是将一个块转换成一个可以被关闭的作用域。\n\n此外，for循环头部的 let 声明还会有一个特殊行为。这个行为指出每个迭代都会使用上一个迭代结束时的值来初始化这个变量。\n``` js\nfor (let i = 1; i <= 5; i++) {\n  setTimeout( function timer() {\n    console.log(i);\n  }, i*1000 )\n}\n```\n\n## this全面解析\n之前写过一篇[深入浅出JavaScript之this](http://www.cnblogs.com/MuYunyun/p/5932024.html)。我们知道this是在运行时进行绑定的，并不是在编写时绑定，它的上下文取决于函数调用时的各种条件。this的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式。\n\n### this词法\n来看下面这段代码的问题：\n``` js\nvar obj = {\n  id: \"awesome\",\n  cool: function coolFn() {\n    console.log(this.id);\n  }\n};\n\nvar id = \"not awesome\";\n\nobj.cool();  // awesome\n\nsetTimeout( obj.cool, 100); // not awesome\n```\nobj.cool() 与 setTimeout( obj.cool, 100 ) 输出结果不一样的原因在于 cool() 函数丢失了同 this 之间的绑定。解决方法最常用的是 var self = this;\n``` js\nvar obj = {\n  count: 0,\n  cool: function coolFn() {\n    var self = this;\n\n    if (self.count < 1) {\n      setTimeout( function timer(){\n        self.count++;\n        console.log(\"awesome?\");\n      }, 100)\n    }\n  }\n}\n\nobj.cool(); // awesome?\n```\n这里用到的知识点是我们非常熟悉的词法作用域。self 只是一个可以通过词法作用域和闭包进行引用的标识符，不关心 this 绑定的过程中发生了什么。\n\nES6 中的箭头函数引人了一个叫作 this 词法的行为：\n``` js\nvar obj = {\n  count: 0,\n  cool: function coolFn() {\n    if (this.count < 1) {\n      setTimeout( () => {\n        this.count++;\n        console.log(\"awesome?\");\n      }, 100)\n    }\n  }\n}\n\nobj.cool(); // awesome?\n```\n箭头函数弃用了所有普通 this 绑定规则，取而代之的是用当前的词法作用域覆盖了 this 本来的值。因此，这个代码片段中的箭头函数只是\"继承\"了 cool() 函数的 this 绑定。\n\n但是箭头函数的缺点就是因为其是匿名的，上文已介绍过具名函数比匿名函数更可取的原因。而且箭头函数将程序员们经常犯的一个错误给标准化了：混淆了 this 绑定规则和词法作用域规则。\n\n箭头函数不仅仅意味着可以少写代码。本书的作者认为使用 bind() 是更靠得住的方式。\n``` js\nvar obj = {\n  count: 0,\n  cool: function coolFn() {\n    if (this.count < 1) {\n      setTimeout( () => {\n        this.count++;\n        console.log(\"more awesome\");\n      }.bind( this ), 100)\n    }\n  }\n}\n\nobj.cool(); // more awesome\n```\n\n### 绑定规则\n函数在执行的过程中，可以根据下面这4条绑定规则来判断 this 绑定到哪。\n* 默认绑定\n  * 独立函数调用\n* 隐式绑定\n  * 当函数引用有上下文对象时，隐式绑定规则会把函数调用中的 this 绑定到这个上下文对象\n* 显示绑定\n  * call/apply\n  * bind（本质是对call/apply函数的封装 `fn.apply( obj, arguments )`）\n  * 第三方库的许多函数都提供了一个可选的参数(上下文)，其作用和 bind() 一样，确保回调函数使用指定的 this\n* new 绑定\n  * JavaScript 中的 new 机制实际上和面向类的语言完全不同\n  * 实际上并不存在所谓的“构造函数”，只有对于函数的“构造调用”\n\n书中对4条绑定规则的优先级进行了验证，得出以下的顺序优先级:\n* 函数是否在 new 中调用（new 绑定）？如果是的话 this 绑定的是新创建的对象。\n* 函数是否通过 call、apply（显式绑定）或者硬绑定（bind）调用？如果是的话，this 绑定的是指定对象。\n* 函数是否在某个上下文对象中调用（隐式绑定）？如果是的话，this 绑定的是那个上下文对象。\n* 如果都不是的话，使用默认绑定。在严格模式下，绑定到 undefined，否则绑定到全局对象。\n\n### 被忽略的 this\n如果你把 null 或者 undefined 作为 this 的绑定对象传入 call、apply 或者 bind，这些值在调用时会被忽略，实际应用的是默认规则。\n\n什么时候会传入 null/undefined 呢？一种非常常见的做法是用 apply(..) 来“展开”一个数组，并当作参数传入一个函数。类似地，bind(..) 可以对参数进行柯里化(预先设置一些参数),如下代码：\n``` js\nfunction foo(a, b) {\n  console.log( \"a:\" + a + \", b:\" + b );\n}\n\n// 把数组\"展开\"成参数\nfoo.apply(null, [2, 3]); // a:2, b:3\n\n// 使用 bind(..) 进行柯里化\nvar bar = foo.bind( null, 2);\nbar(3); // a:2, b:3\n```\n其中 ES6 中，可以用 ... 操作符代替 apply(..) 来“展开”数组，但是 ES6 中没有柯里化的相关语法，因此还是需要使用 bind(..)。\n\n使用 null 来忽略 this 绑定可能产生一些副作用。如果某个函数(比如第三库中的某个函数)确实使用了 this ，默认绑定规则会把 this 绑定到全局对象，这将导致不可预计的后果。更安全的做法是传入一个特殊的对象，一个 “DMZ” 对象，一个空的非委托对象，即 Object.create(null)。\n``` js\nfunction foo(a, b) {\n  console.log( \"a:\" + a + \", b:\" + b );\n}\n\nvar ø = Object.create(null);\n\n// 把数组\"展开\"成参数\nfoo.apply( ø, [2, 3]); // a:2, b:3\n\n// 使用 bind(..) 进行柯里化\nvar bar = foo.bind( ø, 2);\nbar(3); // a:2, b:3\n```\n\n## 对象\nJavaScript中的对象有字面形式（比如`var a = { .. }`)和构造形式（比如`var a = new Array(..)`）。字面形式更常用，不过有时候构造形式可以提供更多选择。\n\n作者认为“JavaScript中万物都是对象”的观点是不对的。因为对象只是 6 个基础类型( string、number、boolean、null、undefined、object )之一。对象有包括 function 在内的子对象，不同子类型具有不同的行为，比如内部标签 [object Array] 表示这是对象的子类型数组。\n\n### 复制对象\n\n首先看下这个对象：\n```js\nlet a = {\n  name: 'XiaoMing',\n  habits:  ['a', 'b']\n}\n```\n\n从这个对象，先抛出下面几个概念：\n\n* 普通的 = 赋值：b = a，如果修改了 b.name，那么 a.name 也会改变\n* 浅复制：如果修改了 b.name, a.name 不会改变，但是修改 b.habits 数组中的值，a.habits 的值也会改变\n* 深复制：b 的值改变，不会对 a 产生任何影响\n\n对于 JSON 安全的对象(就是能用 JSON.stringify 序列号的字符串)来说，有一种巧妙的深复制方法：\n\n``` js\nvar newObj = JSON.parse( JSON.stringify(someObj) )\n```\n\n但是这个方法存在以下坑：\n\n1. 如果对象里面有循环引用，会抛错\n\n2. 不能复制对象里面的 Date、Function、RegExp\n\n3. 所有的构造函数会指向 Object\n\n看下面这个对象：\n``` js\nfunction anotherFunction() { /*..*/ }\n\nvar anotherObject = {\n  c: true\n};\n\nvar anotherArray = [];\n\nvar myObject = {\n  a: 2,\n  b: anotherObject, // 引用，不是复本！\n  c: anotherArray, // 另一个引用！\n  d: anotherFunction\n};\n\nanotherArray.push( myObject )\n```\n如何准确地表示 myObject 的复制呢？\n\n这个例子中除了复制 myObject 以外还会复制 anotherArray。这时问题就来了，anotherArray 引用了 myObject, 所以又需要复制 myObject，这样就会由于循环引用导致死循环。该如何解决呢？\n\n可以查看在 [diana 库中的实践](https://github.com/MuYunyun/diana/blob/master/src/common/lang/cloneDeep.js)。\n\n相比于深复制，浅复制非常易懂并且问题要少得多，ES6 定义了 Object.assign(..) 方法来实现浅复制。 Object.assign(..) 方法的第一个参数是目标对象，之后还可以跟一个或多个源对象。它会遍历一个或多个源对象的所有可枚举的自由键并把它们复制到目标对象，最后返回目标对象，就像这样：\n``` js\nvar newObj = Object.assign( {}, myObject );\n\nnewObj.a; // 2\nnewObj.b === anotherObject; // true\nnewObj.c === anotherArray; // true\nnewObj.d === anotherFunction; // true\n```\n\n## 类\nJavaScript 有一些近似类的语法元素（比如 new 和 instanceof）, 后来的 ES6 中新增了一些如 class 的关键字。但是 JavaScript 实际上并没有类。类是一种设计模式，JavaScript 的机制其实和类完全不同。\n* 类的继承(委托)其实就是复制，但和其他语言中类的表现不同(其他语言类表现出来的都是复制行为)，JavaScript 中的多态（在继承链中不同层次名称相同，但是功能不同的函数）并不表示子类和父类有关联，子类得到的只是父类的一份复本。\n* JavaScript 通过显示混入和隐式混入 call() 来模拟其他语言类的表现。此外，显示混入实际上无法完全模拟类的复制行为，因为对象(和函数！别忘了函数也是对象)只能复制引用，无法复制被引用的对象或者函数本身。\n\n### 检查“类”关系\n思考下面的代码：\n``` js\nfunction Foo() {\n  // ...\n}\n\nFoo.prototype.blah = ...;\n\nvar a = new Foo();\n```\n我们如何找出 a 的 “祖先”（委托关系）呢？\n* 方法一：`a instanceof Foo; // true` (对象 instanceof 函数)\n* 方法二: `Foo.prototype.isPrototypeOf(a); // true` (对象 isPrototypeOf 对象)\n* 方法三: `Object.getPrototypeOf(a) === Foo.prototype; // true` (Object.getPrototypeOf() 可以获取一个对象的 [[Prototype]]) 链;\n* 方法四: `a.__proto__ == Foo.prototype; // true`\n\n### 构造函数\n\n* 函数不是构造函数，而是当且仅当使用 new 时，函数调用会变成“构造函数调用”。\n* 使用 new 会在 prototype 生成一个 constructor 属性，指向构造调用的函数。\n* constructor 并不表示被构造，而且 constructor 属性并不是一个不可变属性，它是不可枚举的，但它是可以被修改的。\n\n### 对象关联\n\n来看下面的代码：\n\n``` js\nvar foo = {\n  something: function() {\n    console.log(\"Tell me something good...\");\n  }\n};\n\nvar bar = Object.create(foo);\n\nbar.something(); // Tell me something good...\n```\nObject.create(..)会创建一个新对象 (bar) 并把它关联到我们指定的对象 (foo)，这样我们就可以充分发挥 [[Prototype]] 机制的为例（委托）并且避免不必要的麻烦 (比如使用 new 的构造函数调用会生成 .prototype 和 .constructor 引用)。\n\nObject.create(null) 会创建一个拥有空链接的对象，这个对象无法进行委托。由于这个对象没有原型链，所以 instanceof 操作符无法进行判断，因此总是会返回 false 。这些特殊的空对象通常被称作“字典”，它们完全不会受到原型链的干扰，因此非常适合用来存储数据。\n\n我们并不需要类来创建两个对象之间的关系，只需要通过委托来关联对象就足够了。而Object.create(..)不包含任何“类的诡计”，所以它可以完美地创建我们想要的关联关系。\n\n此书的第二章第6部分就把`面对类和继承`和`行为委托`两种设计模式进行了对比，我们可以看到行为委托是一种更加简洁的设计模式，在这种设计模式中能感受到`Object.create()`的强大。\n\n### ES6中的Class\n来看一段 ES6中Class 的例子\n``` js\nclass Widget {\n  constructor(width, height) {\n    this.width = width || 50;\n    this.height = height || 50;\n    this.$elem = null;\n  }\n  render($where){\n    if (this.$elem) {\n      this.$elem.css({\n        width: this.width + \"px\"，\n        height: this.height + \"px\"\n      }).appendTo($where);\n    }\n  }\n}\n\nclass Button extends Widget {\n  constructor(width, height, label) {\n    super(width, height);\n    this.label = label || \"Default\";\n    this.$elem = $(\"<button>\").text(this.label)\n  }\n  render($where) {\n    super($where);\n    this.$elem.click(this.onClick.bind(this));\n  }\n  onClick(evt) {\n    console.log(\"Button '\" + this.label + \"' clicked!\")\n  }\n}\n```\n除了语法更好看之外，ES6还有以下优点\n* 基本上不再引用杂乱的 .prototype 了。\n* Button 声明时直接 “继承” 了 Widget。\n* 可以通过 super(..)来实现相对多态，这样任何方法都可以引用原型链上层的同名方法。\n* class 字面语法不能声明属性（只能声明方法）。这是一种限制，但是它会排除掉许多不好的情况。\n* 可以通过 extends 很自然地扩展对象(子)类型。\n\n但是 class 就是完美的吗？在传统面向类的语言中，类定义之后就不会进行修改，所以类的设计模式就不支持修改。但JavaScript 最强大的特性之一就是它的动态性，在使用 class 的有些时候还是会用到 .prototype 以及碰到 super (期望动态绑定然而静态绑定) 的问题，class 基本上都没有提供解决方案。\n\n这也是本书作者希望我们思考的问题。","tags":["读书笔记"],"categories":["JavaScript"]},{"title":"hexo 摸爬滚打之进阶教程","url":"%2Fposts%2Ff55182c5%2F","content":"![](http://oqhtscus0.bkt.clouddn.com/d6b051baa29bb75e6b5f691313a82c33.jpg-muyy)\n\n写博客有三个层次，第一层次是借鉴居多的博文，第二层次是借鉴后经过消化后有一定量产出的博文，第三层次是原创好文居多的博文。在参考了大量前辈搭建hexo的心得后，此文尽量把一些别人未提到的点以及比较好用的点给提出来。所以你在参考本文的时候，应该已经过完了[hexo](https://hexo.io/)。本文有以下内容:\n* 快速实现博客压缩\n* 文章链接唯一化\n* 添加酷炫的打赏二维码\n* 自定义JS和CSS\n* 添加酷炫的歌单模块以及播放器\n* github分支管理博客思路\n* 秒传图片到七牛云并展现在博客中\n* 将博客同时部署到github和coding\n<!--more-->\n\n## 快速实现博客压缩\n\n项目压缩也叫`代码丑化`, 分别对 html、css、js、images进行优化，即把重复的代码合并，把多余的空格去掉，用算法把 images 进行压缩。压缩后的博客，加载速度会有较大的提升，自然能留住更多游客。\n\n蛮多朋友使用了`gulp`对博客进行压缩，这也是一个办法，但在社区逛了下，找到了一个比较好用的模块[hexo-all-minifier](https://github.com/chenzhutian/hexo-all-minifier)，这个模块集成了对 html、css、js、image 的优化。安装上此模块后，只要在根目录下的_config.yml文件中加上如下字段就可对博客所有内容进行压缩。\n``` js\nhtml_minifier:\n  enable: true\n  ignore_error: false\n  exclude:\n\ncss_minifier:\n  enable: true\n  exclude:\n    - '*.min.css'\n\njs_minifier:\n  enable: true\n  mangle: true\n  output:\n  compress:\n  exclude:\n    - '*.min.js'\n\nimage_minifier:\n  enable: true\n  interlaced: false\n  multipass: false\n  optimizationLevel: 2\n  pngquant: false\n  progressive: false\n```\n\n## 文章链接唯一化\n\n也许你会数次更改文章题目或者变更文章发布时间，在默认设置下，文章链接都会改变，不利于搜索引擎收录，也不利于分享。唯一永久链接才是更好的选择。\n\n安装\n\n``` js\nnpm install hexo-abbrlink --save\n```\n在`站点配置文件`中查找代码`permalink`，将其更改为:\n\n``` js\npermalink: posts/:abbrlink/  # “posts/” 可自行更换\n```\n\n这里有个知识点：\n> 百度蜘蛛抓取网页的规则:  对于蜘蛛说网页权重越高、信用度越高抓取越频繁，例如网站的首页和内页。蜘蛛先抓取网站的首页，因为首页权重更高，并且大部分的链接都是指向首页。然后通过首页抓取网站的内页，并不是所有内页蜘蛛都会去抓取。\n\n搜索引擎认为对于一般的中小型站点，3层足够承受所有的内容了，所以蜘蛛经常抓取的内容是前三层，而超过三层的内容蜘蛛认为那些内容并不重要，所以不经常爬取。出于这个原因所以permalink后面跟着的最好不要超过2个斜杠。\n\n然后在`站点配置文件`中添加如下代码:\n``` js\n# abbrlink config\nabbrlink:\n  alg: crc32  # 算法：crc16(default) and crc32\n  rep: hex    # 进制：dec(default) and hex\n```\n\n可选择模式：\n* crc16 & hex\n* crc16 & dec\n* crc32 & hex\n* crc32 & dec\n\n## 添加酷炫的打赏二维码\n看了好些博客，支付宝的收款码和微信的收款码都是分开的，且是没有美化过的二维码，让人打赏的欲望自然就下降了。来看一下我的赞赏二维码(支持微信和支付宝支付哟)\n![](http://oqhtscus0.bkt.clouddn.com/134f61fc3181e90acfa945aad72a04a6.png-400)\n\n实现这个酷炫二维码的流程如下：\n* 首先，分别获得支付宝和微信的收款码\n* 接着到[芝麻二维码](https://www.hotapp.cn/shouqian)里将两张二维码合并\n* 最后到[第九工场](http://www.9thws.com/)生成自己喜欢的造型\n\n讲生成的图片pay.png放到根目录的source文件中，并在主题配置文件中加上\n``` js\nalipay: /pay.png\n```\n\n### 打赏字体不闪动\n修改文件`next/source/css/_common/components/post/post-reward.styl`，然后注释其中的函数`wechat:hover`和`alipay:hover`，如下：\n``` js\n/* 注释文字闪动函数\n #wechat:hover p{\n    animation: roll 0.1s infinite linear;\n    -webkit-animation: roll 0.1s infinite linear;\n    -moz-animation: roll 0.1s infinite linear;\n}\n #alipay:hover p{\n   animation: roll 0.1s infinite linear;\n    -webkit-animation: roll 0.1s infinite linear;\n    -moz-animation: roll 0.1s infinite linear;\n}\n*/\n```\n\n## 自定义JS和CSS\n\n博主用的是next主题，别的主题目录结构可能不太一样，但是整个框架是一样的，生成方式是一样的，所以引用方式也是相同的\n\n### 添加自定义js样式\n* 首先把js文件放在`\\themes\\next\\source\\js\\src`文件目录下\n* 然后找到`\\themes\\next\\layout`目录下的布局文件`_layout.swig`\n* 把script引用代码加入到该文件中即可\n\n`<script type=\"text/javascript\" src=\"/js/src/js文件名.js\"></script>`\n\n### 添加自定义css样式\n添加外部css样式和引用自定义js代码是一样的，在对应css文件夹内添加自定义外部css样式文件，然后在layout文件中添加引用即可。也可以在`\\themes\\next\\source\\css\\_custom\\custom.styl`文件中进行样式的添加。\n\n## 添加酷炫的歌单模块以及播放器\n这个模块借鉴了@[小胡子哥](http://www.barretlee.com/entry/)。根据上面的自定义JS和CSS的知识点不难实现歌单模块以及播放器。效果如下图：\n![](http://oqhtscus0.bkt.clouddn.com/502d78856e46095253e59fd11396b2a4.jpg)\n核心代码在`\\themes\\next\\source\\js\\src\\music\\nmlist`中，[点击看源码](https://github.com/MuYunyun/MuYunyun.githubio/blob/muyy/themes/next/source/js/src/music/nmlist.js)，其核心思路就是通过jsonp的方式对定义好的歌单进行调用。\n\n在调试的过程中，发现了小胡子哥代码的一个bug：当点击一个专辑暂停后，再点击其他的专辑，这时候点击暂停、播放的控制逻辑有错误。经过排查在nmlist.js文件中的bind方法中加上了`$(\"#nmPlayer\").removeAttr(\"data-paused\")`解决了这个bug。\n\n![](http://oqhtscus0.bkt.clouddn.com/73d9f4070b81bbdab8f80db388af4a40.jpg)\n\n再接着玩的话，可以给播放器加上歌词的功能。这里有一篇[相关文章](http://frankorz.com/2016/09/30/Hexo-patch/#歌词), 有机会可以去把玩一番。\n\n## github分支管理博客思路\n有一个问题，如果我电脑坏了怎么办，因为在github中的我们github.io项目是只有编译后的文件的，没有源文件的，也就是说，如果我们的电脑坏了，打不开了，我们的博客就不能进行更新了，所以我们要把我们的源文件也上传到github上。这个时候我可以选择新建一个仓库来存放源文件，也可以把源文件 push 到 user.github.io 的其他分支。我选择了后者。\n\n### 创建muyy(任意)分支\n创建两个分支：master 与 muyy,（这个muyy分支就是存放我们源文件的分支，我们只需要更新muyy分支上的内容据就好，master上的分支hexo编译的时候会更新的）\n\n### 初始化仓库\n然后我们再初始化仓库，重新对我们的代码进行版本控制\n``` js\ngit init\ngit remote add origin <server>\n```\n`<server>`是指在线仓库的地址。origin是本地分支,remote add操作会将本地仓库映射到云端\n\n### 将博客源文件上传至muyy分支\n.gitignore文件作用是声明不被git记录的文件，blog根目录下的.gitignore是hexo初始化带来的，可以先删除或者直接编辑，对hexo不会有影响。建议.gitignore内添加以下内容：\n``` js\n/.deploy_git\n/public\n/_config.yml\n```\n.deploy_git是hexo默认的.git配置文件夹，不需要同步\npublic内文件是根据source文件夹内容自动生成，不需要备份，不然每次改动内容太多\n即使是私有仓库，除去在线服务商员工可以看到的风险外，还有云服务商被攻击造成泄漏等可能，所以不建议将配置文件传上去\n\n依次执行\n``` js\ngit add .\ngit commit -m \"...\"\ngit push origin muyy\n```\n\n## 秒传图片到七牛云并展现在博客中\n在markdown中写blog的朋友，想必这点是最烦恼的吧，一般来说都要手动上传图片到七牛云，再把链接写到markdown中。逛了逛社区，有人用phthon实现一个自动上传的脚本，但是我觉得还不是特别方便，这时在github上找到一个一键贴图工具[qiniu-image-tool](https://github.com/jiwenxing/qiniu-image-tool)，它支持本地文件、截图、网络图片一键上传七牛云并返回图片引用。Mac 是基于 Alfred 的，其 windows 也有相应版本[windows版本](http://jverson.com/2017/05/28/qiniu-image-v2/)。\n\n按照其要求配置好以后，用截图软件截图后，或者本地图片后 copy，然后直接按设置好的 command+option+v，然后在图片成功上传到七牛云图床上，剪贴板上也有相应的连接。\n![](https://raw.githubusercontent.com/jiwenxing/qiniu-image-tool/master/res/local.gif)\n\n## 将博客同时部署到 github 和 coding\n通常我们把hexo托管在github，但是毕竟github是国外的，访问速度上还是有点慢，所以想也部署一套在国内的托管平台，目前gitcafe已经被coding收购了，所以就决定部署到coding。但是coding有个不好的地方就是访问自定义域名的站点时，不充值的话会有广告跳转页，所以我现在也是处于观望的态度，先把coding的环境代码也先布置好，等它哪一天广告跳转页没了，就把域名指过去。\n\n### coding 上创建一个新项目\n这里只介绍 coding 上面如何创建项目，以及把本地 hexo 部署到 coding 上面\n![](http://oqhtscus0.bkt.clouddn.com/41b27d98189a9164d2b2a47ccbafdbfa.jpg)\n\n### 同步本地 hexo 到 coding 上\n把获取到了ssh配置_config.yml文件中的deploy下，如果是第一次使用 coding 的话，需要设置SSH公钥，生成的方法可以参考[coding帮助中心](https://coding.net/help/doc/git/ssh-key.html), 其实和 github 配置一模一样的。\n\n本地打开 `id_rsa.pub` 文件，复制其中全部内容，填写到`SSH_RSA公钥`key下的一栏，公钥名称可以随意起名字。完成后点击“添加”，然后输入密码或动态码即可添加完成。\n\n添加后，在git bash命令输入：\n``` js\nssh -T git@git.coding.net\n```\n如果得到下面提示就表示公钥添加成功了：\n``` js\nCoding.net Tips : [Hello ! You've conected to Coding.net by SSH successfully! ]\n```\n想要同时部署到2个平台，就要修改博客根目录下面的_config.yml文件中的deploy如下\n根据Hexo官方文档需要修改成下面的形式\n``` js\ndeploy:\n  type: git\n  message: [message]\n  repo:\n    github: <repository url>,[branch]\n    gitcafe: <repository url>,[branch]\n\n```\n所以我是这样的\n``` js\ndeploy:\n- type: git\n  repo:\n    github: https://github.com/MuYunyun/MuYunyun.github.io.git,master\n    coding: git@git.coding.net:muyunyun/muyunyun.git,master\n```\n最后使用部署命令就能把博客同步到coding上面：\n``` js\nhexo deploy -g\n```\n\n### pages服务方式部署\n将代码上传至coding之后我们就要开启pages服务了，在pages页面我们只需要将部署来源选择为master分支，然后将自定义域名填写我们自己购买的域名就可以了\n\n### 设置域名解析\n现在要实现国内的走coding，海外的走github，只要配置2个CNAME就行。域名解析如下：\n![](http://oqhtscus0.bkt.clouddn.com/c2337ab8ed97d0f825703e8ea80a4123.jpg)\n\n## 参考资料\n* [小胡子哥](http://www.barretlee.com/entry/)\n* [Hexo Next主题设置和优化](http://www.vitah.net/posts/20f300cc/)\n* [Hexo 博客补丁](http://frankorz.com/2016/09/30/Hexo-patch/)\n* [Water Sister's Blog](http://www.cduyzh.com/page/3/)\n* [Hexo+NexT主题配置备忘](http://blog.ynxiu.com/2016/hexo-next-theme-optimize.html)\n* [Cherry's Blog](http://www.cherryblog.site/)\n* [Hexo 3.1.1 静态博客搭建指南](http://lovenight.github.io/2015/11/10/Hexo-3-1-1-%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/)\n* [hexo的next主题个性化教程:打造炫酷网站](http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html)\n* [将hexo博客同时托管到github和coding](http://tengj.github.io/2016/03/06/hexo4/)","tags":["blog"],"categories":["git"]}]