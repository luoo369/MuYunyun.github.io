<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[读书笔记-你不知道的JavaScript(上)]]></title>
    <url>%2Fposts%2F4a895cbd%2F</url>
    <content type="text"><![CDATA[本文首发在我的个人博客：http://muyunyun.cn/《你不知道的JavaScript》系列丛书给出了很多颠覆以往对JavaScript认知的点, 读完上卷，受益匪浅，于是对其精华的知识点进行了梳理。什么是作用域作用域是一套规则，用于确定在何处以及如何查找变量。编译原理JavaScript是一门编译语言。在传统编译语言的流程中，程序中一段源代码在执行之前会经历三个步骤，统称为“编译”。分词/词法分析将字符串分解成有意义的代码块，代码块又称词法单元。比如程序var a = 2;会被分解为var、a、=、2、;解析/语法分析将词法单元流转换成一个由元素逐级嵌套所组成的代表了程序语法接口的书，又称“抽象语法树”。代码生成将抽象语法树转换为机器能够识别的指令。理解作用域作用域 分别与编译器、引擎进行配合完成代码的解析引擎执行时会与作用域进行交流，确定RHS与LHS查找具体变量，如果查找不到会抛出异常。编译器负责语法分析以及生成代码。作用域负责收集并维护所有变量组成的一系列查询，并确定当前执行的代码对这些变量的访问权限。对于 var a = 2 这条语句，首先编译器会将其分为两部分，一部分是 var a，一部分是 a = 2。编译器会在编译期间执行 var a，然后到作用域中去查找 a 变量，如果 a 变量在作用域中还没有声明，那么就在作用域中声明 a 变量，如果 a 变量已经存在，那就忽略 var a 语句。然后编译器会为 a = 2 这条语句生成执行代码，以供引擎执行该赋值操作。所以我们平时所提到的变量提升，无非就是利用这个先声明后赋值的原理而已！异常对于 var a = 10 这条赋值语句，实际上是为了查找变量 a， 并且将 10 这个数值赋予它，这就是 LHS 查询。 对于 console.log(a) 这条语句，实际上是为了查找 a 的值并将其打印出来，这是 RHS 查询。为什么区分 LHS 和 RHS 是一件重要的事情？在非严格模式下，LHS 调用查找不到变量时会创建一个全局变量，RHS 查找不到变量时会抛出 ReferenceError。 在严格模式下，LHS 和 RHS 查找不到变量时都会抛出 ReferenceError。作用域的工作模式作用域共有两种主要的工作模型。第一种是最为普遍的，被大多数编程语言所采用的词法作用域( JavaScript 中的作用域就是词法作用域)。另外一种是动态作用域，仍有一些编程语言在使用(比如Bash脚本、Perl中的一些模式等)。词法作用域词法作用域是一套关于引擎如何寻找变量以及会在何处找到变量的规则。词法作用域最重要的特征是它的定义过程发生在代码的书写阶段(假设没有使用 eval() 或 with )。来看示例代码:123456789101112function foo() &#123; console.log(a); // 2&#125;function bar() &#123; var a = 3; foo();&#125;var a = 2;bar()词法作用域让foo()中的a通过RHS引用到了全局作用域中的a，因此会输出2。动态作用域而动态作用域只关心它们从何处调用。换句话说，作用域链是基于调用栈的，而不是代码中的作用域嵌套。因此，如果 JavaScript 具有动态作用域，理论上，下面代码中的 foo() 在执行时将会输出3。123456789101112function foo() &#123; console.log(a); // 3&#125;function bar() &#123; var a = 3; foo();&#125;var a = 2;bar()函数作用域匿名与具名对于函数表达式一个最熟悉的场景可能就是回调函数了，比如123setTimeout( function() &#123; console.log("I waited 1 second!")&#125;, 1000 )这叫作匿名函数表达式。函数表达式可以匿名，而函数声明则不可以省略函数名。匿名函数表达式书写起来简单快捷,很多库和工具也倾向鼓励使用这种风格的代码。但它也有几个缺点需要考虑。匿名函数在栈追踪中不会显示出有意义的函数名,使得调试很困难。如果没有函数名,当函数需要引用自身时只能使用已经过期的 arguments.callee 引用,比如在递归中。另一个函数需要引用自身的例子,是在事件触发后事件监听器需要解绑自身。匿名函数省略了对于代码可读性 / 可理解性很重要的函数名。一个描述性的名称可以让代码不言自明。始终给函数表达式命名是一个最佳实践:123setTimeout( function timeoutHandler() &#123; // 我有名字了 console.log("I waited 1 second!")&#125;, 1000 )提升先有声明还是先有赋值考虑以下代码：12345a = 2;var a;console.log(a); // 2考虑另外一段代码123console.log(a); // undefinedvar a = 2;我们习惯将 var a = 2; 看作一个声明，而实际上 JavaScript 引擎并不这么认为。它将 var a 和 a = 2 当作两个单独的声明，第一个是编译阶段的任务，而第二个是执行阶段的任务。这意味着无论作用域中的声明出现在什么地方，都将在代码本身被执行前首先进行处理。可以将这个过程形象地想象成所有的声明（变量和函数）都会被“移动”到各自作用域的最顶端，这个过程称为提升。可以看出，先有声明后有赋值。再来看以下代码：123456foo(); // TypeErrorbar(); // ReferenceErrorvar foo = function bar() &#123; // ...&#125;;这个代码片段经过提升后，实际上会被理解为以下形式:123456789var foo;foo(); // TypeErrorbar(); // ReferenceErrorfoo = function() &#123; var bar = ...self... // ...&#125;;这段程序中的变量标识符 foo() 被提升并分配给全局作用域，因此 foo() 不会导致 ReferenceError。但是 foo 此时并没有赋值(如果它是一个函数声明而不是函数表达式就会赋值)。foo()由于对 undefined 值进行函数调用而导致非法操作，因此抛出 TypeError 异常。另外即时是具名的函数表达式，名称标识符(这里是 bar )在赋值之前也无法在所在作用域中使用。闭包之前写过关于闭包的一篇文章深入浅出JavaScript之闭包(Closure)循环和闭包要说明闭包，for 循环是最常见的例子。12345for (var i = 1; i &lt;= 5; i++) &#123; setTimeout( function timer() &#123; console.log(i); &#125;, i*1000 )&#125;正常情况下，我们对这段代码行为的预期是分别输出数字 1~5，每秒一次，每次一个。但实际上，这段代码在运行时会以每秒一次的频率输出五次6。它的缺陷在于：根据作用域的工作原理，尽管循环中的五个函数是在各个迭代中分别定义的，但是它们都被封闭在一个共享的全局作用域中，因此实际上只有一个i。因此我们需要更多的闭包作用域。我们知道IIFE会通过声明并立即执行一个函数来创建作用域，我们来进行改进：12345678for (var i = 1; i &lt;= 5; i++) &#123; (function() &#123; var j = i; setTimeout( function timer() &#123; console.log(j); &#125;, j*1000 ) &#125;)();&#125;还可以对这段代码进行一些改进：1234567for (var i = 1; i &lt;= 5; i++) &#123; (function(j) &#123; setTimeout( function timer() &#123; console.log(j); &#125;, j*1000 ) &#125;)(i);&#125;在迭代内使用 IIFE 会为每个迭代都生成一个新的作用域，使得延迟函数的回调可以将新的作用域封闭在每个迭代内部，每个迭代中都会含有一个具有正确值的变量供我们访问。重返块作用域我们使用 IIFE 在每次迭代时都创建一个新的作用域。换句话说，每次迭代我们都需要一个块作用域。我们知道 let 声明可以用来劫持块作用域，那我们可以进行这样改：123456for (var i = 1; i &lt;= 5; i++) &#123; let j = i; setTimeout( function timer() &#123; console.log(j); &#125;, j*1000 )&#125;本质上这是将一个块转换成一个可以被关闭的作用域。此外，for循环头部的 let 声明还会有一个特殊行为。这个行为指出每个迭代都会使用上一个迭代结束时的值来初始化这个变量。12345for (let i = 1; i &lt;= 5; i++) &#123; setTimeout( function timer() &#123; console.log(i); &#125;, i*1000 )&#125;this全面解析之前写过一篇深入浅出JavaScript之this。我们知道this是在运行时进行绑定的，并不是在编写时绑定，它的上下文取决于函数调用时的各种条件。this的绑定和函数声明的位置没有任何关系，只取决于函数的调用方式。this词法来看下面这段代码的问题：123456789101112var obj = &#123; id: "awesome", cool: function coolFn() &#123; console.log(this.id); &#125;&#125;;var id = "not awesome";obj.cool(); // awesomesetTimeout( obj.cool, 100); // not awesomeobj.cool() 与 setTimeout( obj.cool, 100 ) 输出结果不一样的原因在于 cool() 函数丢失了同 this 之间的绑定。解决方法最常用的是 var self = this;123456789101112131415var obj = &#123; count: 0, cool: function coolFn() &#123; var self = this; if (self.count &lt; 1) &#123; setTimeout( function timer()&#123; self.count++; console.log("awesome?"); &#125;, 100) &#125; &#125;&#125;obj.cool(); // awesome?这里用到的知识点是我们非常熟悉的词法作用域。self 只是一个可以通过词法作用域和闭包进行引用的标识符，不关心 this 绑定的过程中发生了什么。ES6 中的箭头函数引人了一个叫作 this 词法的行为：12345678910111213var obj = &#123; count: 0, cool: function coolFn() &#123; if (this.count &lt; 1) &#123; setTimeout( () =&gt; &#123; this.count++; console.log("awesome?"); &#125;, 100) &#125; &#125;&#125;obj.cool(); // awesome?箭头函数弃用了所有普通 this 绑定规则，取而代之的是用当前的词法作用域覆盖了 this 本来的值。因此，这个代码片段中的箭头函数只是”继承”了 cool() 函数的 this 绑定。但是箭头函数的缺点就是因为其是匿名的，上文已介绍过具名函数比匿名函数更可取的原因。而且箭头函数将程序员们经常犯的一个错误给标准化了：混淆了 this 绑定规则和词法作用域规则。箭头函数不仅仅意味着可以少写代码。本书的作者认为使用 bind() 是更靠得住的方式。12345678910111213var obj = &#123; count: 0, cool: function coolFn() &#123; if (this.count &lt; 1) &#123; setTimeout( () =&gt; &#123; this.count++; console.log("more awesome"); &#125;.bind( this ), 100) &#125; &#125;&#125;obj.cool(); // more awesome绑定规则函数在执行的过程中，可以根据下面这4条绑定规则来判断 this 绑定到哪。默认绑定独立函数调用隐式绑定当函数引用有上下文对象时，隐式绑定规则会把函数调用中的 this 绑定到这个上下文对象显示绑定call/applybind（本质是对call/apply函数的封装 fn.apply( obj, arguments )）第三方库的许多函数都提供了一个可选的参数(上下文)，其作用和 bind() 一样，确保回调函数使用指定的 thisnew 绑定JavaScript 中的 new 机制实际上和面向类的语言完全不同实际上并不存在所谓的“构造函数”，只有对于函数的“构造调用”书中对4条绑定规则的优先级进行了验证，得出以下的顺序优先级:函数是否在 new 中调用（new 绑定）？如果是的话 this 绑定的是新创建的对象。函数是否通过 call、apply（显式绑定）或者硬绑定（bind）调用？如果是的话，this 绑定的是指定对象。函数是否在某个上下文对象中调用（隐式绑定）？如果是的话，this 绑定的是那个上下文对象。如果都不是的话，使用默认绑定。在严格模式下，绑定到 undefined，否则绑定到全局对象。被忽略的 this如果你把 null 或者 undefined 作为 this 的绑定对象传入 call、apply 或者 bind，这些值在调用时会被忽略，实际应用的是默认规则。什么时候会传入 null/undefined 呢？一种非常常见的做法是用 apply(..) 来“展开”一个数组，并当作参数传入一个函数。类似地，bind(..) 可以对参数进行柯里化(预先设置一些参数),如下代码：12345678910function foo(a, b) &#123; console.log( "a:" + a + ", b:" + b );&#125;// 把数组"展开"成参数foo.apply(null, [2, 3]); // a:2, b:3// 使用 bind(..) 进行柯里化var bar = foo.bind( null, 2);bar(3); // a:2, b:3其中 ES6 中，可以用 … 操作符代替 apply(..) 来“展开”数组，但是 ES6 中没有柯里化的相关语法，因此还是需要使用 bind(..)。使用 null 来忽略 this 绑定可能产生一些副作用。如果某个函数(比如第三库中的某个函数)确实使用了 this ，默认绑定规则会把 this 绑定到全局对象，这将导致不可预计的后果。更安全的做法是传入一个特殊的对象，一个 “DMZ” 对象，一个空的非委托对象，即 Object.create(null)。123456789101112function foo(a, b) &#123; console.log( "a:" + a + ", b:" + b );&#125;var ø = Object.create(null);// 把数组"展开"成参数foo.apply( ø, [2, 3]); // a:2, b:3// 使用 bind(..) 进行柯里化var bar = foo.bind( ø, 2);bar(3); // a:2, b:3对象JavaScript中的对象有字面形式（比如var a = { .. })和构造形式（比如var a = new Array(..)）。字面形式更常用，不过有时候构造形式可以提供更多选择。作者认为“JavaScript中万物都是对象”的观点是不对的。因为对象只是 6 个基础类型( string、number、boolean、null、undefined、object )之一。对象有包括 function 在内的子对象，不同子类型具有不同的行为，比如内部标签 [object Array] 表示这是对象的子类型数组。复制对象思考一下这个对象：12345678910111213141516function anotherFunction() &#123; /*..*/ &#125;var anotherObject = &#123; c: true&#125;;var anotherArray = [];var myObject = &#123; a: 2, b: anotherObject, // 引用，不是复本！ c: anotherArray, // 另一个引用！ d: anotherFunction&#125;;anotherArray.push( myObject )如何准确地表示 myObject 的复制呢？这里有一个知识点。浅复制。复制出的新对象中 a 的值会复制旧对象中 a 的值，也就是 2，但是新对象中 b、c、d 三个属性其实只是三个引用。深复制。除了复制 myObject 以外还会复制 anotherArray。这时问题就来了，anotherArray 引用了 myObject, 所以又需要复制 myObject，这样就会由于循环引用导致死循环。对于 JSON 安全的对象(就是能用 JSON.stringify 序列号的字符串)来说，有一种巧妙的复制方法：1var newObj = JSON.parse( JSON.stringify(someObj) )我认为这种方法就是深复制。相比于深复制，浅复制非常易懂并且问题要少得多，ES6 定义了 Object.assign(..) 方法来实现浅复制。 Object.assign(..) 方法的第一个参数是目标对象，之后还可以跟一个或多个源对象。它会遍历一个或多个源对象的所有可枚举的自由键并把它们复制到目标对象，最后返回目标对象，就像这样：123456var newObj = Object.assign( &#123;&#125;, myObject );newObj.a; // 2newObj.b === anotherObject; // truenewObj.c === anotherArray; // truenewObj.d === anotherFunction; // true类JavaScript 有一些近似类的语法元素（比如 new 和 instanceof）, 后来的 ES6 中新增了一些如 class 的关键字。但是 JavaScript 实际上并没有类。类是一种设计模式，JavaScript 的机制其实和类完全不同。类的继承(委托)其实就是复制，但和其他语言中类的表现不同(其他语言类表现出来的都是复制行为)，JavaScript 中的多态（在继承链中不同层次名称相同，但是功能不同的函数）并不表示子类和父类有关联，子类得到的只是父类的一份复本。JavaScript 通过显示混入和隐式混入 call() 来模拟其他语言类的表现。此外，显示混入实际上无法完全模拟类的复制行为，因为对象(和函数！别忘了函数也是对象)只能复制引用，无法复制被引用的对象或者函数本身。检查“类”关系思考下面的代码：1234567function Foo() &#123; // ...&#125;Foo.prototype.blah = ...;var a = new Foo();我们如何找出 a 的“祖先”（委托关系）呢？方法一：a instanceof Foo; // true (对象 instanceof 函数)方法二: Foo.prototype.isPrototypeOf(a); // true (对象 isPrototypeOf 对象)方法三: Object.getPrototypeOf(a) === Foo.prototype; // true (Object.getPrototypeOf() 可以获取一个对象的 [[Prototype]]) 链;方法四: a.__proto__ == Foo.prototype; // true构造函数函数不是构造函数，而是当且仅当使用 new 时，函数调用会变成“构造函数调用”。使用 new 会在 prototype 生成一个 constructor 属性，指向构造调用的函数。constructor 并不表示被构造，而且 constructor 属性并不是一个不可变属性，它是不可枚举的，但它是可以被修改的。对象关联来看下面的代码：123456789var foo = &#123; something: function() &#123; console.log("Tell me something good..."); &#125;&#125;;var bar = Object.create(foo);bar.something(); // Tell me something good...Object.create(..)会创建一个新对象 (bar) 并把它关联到我们指定的对象 (foo)，这样我们就可以充分发挥 [[Prototype]] 机制的为例（委托）并且避免不必要的麻烦 (比如使用 new 的构造函数调用会生成 .prototype 和 .constructor 引用)。Object.create(null) 会创建一个拥有空链接的对象，这个对象无法进行委托。由于这个对象没有原型链，所以 instanceof 操作符无法进行判断，因此总是会返回 false 。这些特殊的空对象通常被称作“字典”，它们完全不会受到原型链的干扰，因此非常适合用来存储数据。我们并不需要类来创建两个对象之间的关系，只需要通过委托来关联对象就足够了。而Object.create(..)不包含任何“类的诡计”，所以它可以完美地创建我们想要的关联关系。此书的第二章第6部分就把面对类和继承和行为委托两种设计模式进行了对比，我们可以看到行为委托是一种更加简洁的设计模式，在这种设计模式中能感受到Object.create()的强大。ES6中的Class来看一段 ES6中Class 的例子123456789101112131415161718192021222324252627282930class Widget &#123; constructor(width, height) &#123; this.width = width || 50; this.height = height || 50; this.$elem = null; &#125; render($where)&#123; if (this.$elem) &#123; this.$elem.css(&#123; width: this.width + "px"， height: this.height + "px" &#125;).appendTo($where); &#125; &#125;&#125;class Button extends Widget &#123; constructor(width, height, label) &#123; super(width, height); this.label = label || "Default"; this.$elem = $("&lt;button&gt;").text(this.label) &#125; render($where) &#123; super($where); this.$elem.click(this.onClick.bind(this)); &#125; onClick(evt) &#123; console.log("Button '" + this.label + "' clicked!") &#125;&#125;除了语法更好看之外，ES6还有以下优点基本上不再引用杂乱的 .prototype 了。Button 声明时直接 “继承” 了 Widget。可以通过 super(..)来实现相对多态，这样任何方法都可以引用原型链上层的同名方法。class 字面语法不能声明属性（只能声明方法）。这是一种限制，但是它会排除掉许多不好的情况。可以通过 extends 很自然地扩展对象(子)类型。但是 class 就是完美的吗？在传统面向类的语言中，类定义之后就不会进行修改，所以类的设计模式就不支持修改。但JavaScript 最强大的特性之一就是它的动态性，在使用 class 的有些时候还是会用到 .prototype 以及碰到 super (期望动态绑定然而静态绑定) 的问题，class 基本上都没有提供解决方案。这也是本书作者希望我们思考的问题。]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo摸爬滚打之进阶教程]]></title>
    <url>%2Fposts%2Ff55182c5%2F</url>
    <content type="text"><![CDATA[本文首发在我的个人博客：http://muyunyun.cn/写博客有三个层次，第一层次是借鉴居多的博文，第二层次是借鉴后经过消化后有一定量产出的博文，第三层次是原创好文居多的博文。在参考了大量前辈搭建hexo的心得后，此文尽量把一些别人未提到的点以及比较好用的点给提出来。所以你在参考本文的时候，应该已经过完了hexo。本文有以下内容:快速实现博客压缩文章链接唯一化添加酷炫的打赏二维码自定义JS和CSS添加酷炫的歌单模块以及播放器github分支管理博客思路秒传图片到七牛云并展现在博客中将博客同时部署到github和coding快速实现博客压缩项目压缩也叫代码丑化,分别对html、css、js、images进行优化，即把重复的代码合并，把多余的空格去掉，用算法把images进行压缩。压缩后的博客，加载速度会有较大的提升，自然能留住更多游客。蛮多朋友使用了gulp对博客进行压缩，这也是一个办法，但在社区逛了下，找到了一个比较好用的模块hexo-all-minifier，这个模块集成了对html、css、js、image的优化。安装上此模块后，只要在根目录下的_config.yml文件中加上如下字段就可对博客所有内容进行压缩。12345678910111213141516171819202122232425html_minifier: enable: true ignore_error: false exclude:css_minifier: enable: true exclude: - '*.min.css'js_minifier: enable: true mangle: true output: compress: exclude: - '*.min.js'image_minifier: enable: true interlaced: false multipass: false optimizationLevel: 2 pngquant: false progressive: false文章链接唯一化也许你会数次更改文章题目或者变更文章发布时间，在默认设置下，文章链接都会改变，不利于搜索引擎收录，也不利于分享。唯一永久链接才是更好的选择。安装1npm install hexo-abbrlink --save在站点配置文件中查找代码permalink，将其更改为:1permalink: posts/:abbrlink/ # “posts/” 可自行更换这里有个知识点：百度蜘蛛抓取网页的规则: 对于蜘蛛说网页权重越高、信用度越高抓取越频繁，例如网站的首页和内页。蜘蛛先抓取网站的首页，因为首页权重更高，并且大部分的链接都是指向首页。然后通过首页抓取网站的内页，并不是所有内页蜘蛛都会去抓取。搜索引擎认为对于一般的中小型站点，3层足够承受所有的内容了，所以蜘蛛经常抓取的内容是前三层，而超过三层的内容蜘蛛认为那些内容并不重要，所以不经常爬取。出于这个原因所以permalink后面跟着的最好不要超过2个斜杠。然后在站点配置文件中添加如下代码:1234# abbrlink configabbrlink: alg: crc32 # 算法：crc16(default) and crc32 rep: hex # 进制：dec(default) and hex可选择模式：crc16 &amp; hexcrc16 &amp; deccrc32 &amp; hexcrc32 &amp; dec添加酷炫的打赏二维码看了好些博客，支付宝的收款码和微信的收款码都是分开的，且是没有美化过的二维码，让人打赏的欲望自然就下降了。来看一下我的赞赏二维码(支持微信和支付宝支付哟)实现这个酷炫二维码的流程如下：首先，分别获得支付宝和微信的收款码接着到芝麻二维码里将两张二维码合并最后到第九工场生成自己喜欢的造型讲生成的图片pay.png放到根目录的source文件中，并在主题配置文件中加上1alipay: /pay.png打赏字体不闪动修改文件next/source/css/_common/components/post/post-reward.styl，然后注释其中的函数wechat:hover和alipay:hover，如下：123456789101112/* 注释文字闪动函数 #wechat:hover p&#123; animation: roll 0.1s infinite linear; -webkit-animation: roll 0.1s infinite linear; -moz-animation: roll 0.1s infinite linear;&#125; #alipay:hover p&#123; animation: roll 0.1s infinite linear; -webkit-animation: roll 0.1s infinite linear; -moz-animation: roll 0.1s infinite linear;&#125;*/自定义JS和CSS博主用的是next主题，别的主题目录结构可能不太一样，但是整个框架是一样的，生成方式是一样的，所以引用方式也是相同的添加自定义js样式首先把js文件放在\themes\next\source\js\src文件目录下然后找到\themes\next\layout目录下的布局文件_layout.swig把script引用代码加入到该文件中即可&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/js文件名.js&quot;&gt;&lt;/script&gt;添加自定义css样式添加外部css样式和引用自定义js代码是一样的，在对应css文件夹内添加自定义外部css样式文件，然后在layout文件中添加引用即可。也可以在\themes\next\source\css\_custom\custom.styl文件中进行样式的添加。添加酷炫的歌单模块以及播放器这个模块借鉴了@小胡子哥。根据上面的自定义JS和CSS的知识点不难实现歌单模块以及播放器。效果如下图：核心代码在\themes\next\source\js\src\music\nmlist中，点击看源码，其核心思路就是通过jsonp的方式对定义好的歌单进行调用。在调试的过程中，发现了小胡子哥代码的一个bug：当点击一个专辑暂停后，再点击其他的专辑，这时候点击暂停、播放的控制逻辑有错误。经过排查在nmlist.js文件中的bind方法中加上了$(&quot;#nmPlayer&quot;).removeAttr(&quot;data-paused&quot;)解决了这个bug。再接着玩的话，可以给播放器加上歌词的功能。这里有一篇相关文章,有机会可以去把玩一番。github分支管理博客思路有一个问题，如果我电脑坏了怎么办，因为在github中的我们github.io项目是只有编译后的文件的，没有源文件的，也就是说，如果我们的电脑坏了，打不开了，我们的博客就不能进行更新了，所以我们要把我们的源文件也上传到github上。这个时候我可以选择新建一个仓库来存放源文件，也可以把源文件push到user.github.io的其他分支。我选择了后者。创建muyy(任意)分支创建两个分支：master 与 muyy,（这个muyy分支就是存放我们源文件的分支，我们只需要更新muyy分支上的内容据就好，master上的分支hexo编译的时候会更新的）初始化仓库然后我们再初始化仓库，重新对我们的代码进行版本控制12git initgit remote add origin &lt;server&gt;&lt;server&gt;是指在线仓库的地址。origin是本地分支,remote add操作会将本地仓库映射到云端将博客源文件上传至muyy分支.gitignore文件作用是声明不被git记录的文件，blog根目录下的.gitignore是hexo初始化带来的，可以先删除或者直接编辑，对hexo不会有影响。建议.gitignore内添加以下内容：123/.deploy_git/public/_config.yml.deploy_git是hexo默认的.git配置文件夹，不需要同步public内文件是根据source文件夹内容自动生成，不需要备份，不然每次改动内容太多即使是私有仓库，除去在线服务商员工可以看到的风险外，还有云服务商被攻击造成泄漏等可能，所以不建议将配置文件传上去依次执行123git add .git commit -m "..."git push origin muyy秒传图片到七牛云并展现在博客中在markdown中写blog的朋友，想必这点是最烦恼的吧，一般来说都要手动上传图片到七牛云，再把链接写到markdown中。逛了逛社区，有人用phthon实现一个自动上传的脚本，但是我觉得还不是特别方便，这时在github上找到一个一键贴图工具qiniu-image-tool，它支持本地文件、截图、网络图片一键上传七牛云并返回图片引用。Mac是基于Alfred的，其windows也有相应版本windows版本。按照其要求配置好以后，用截图软件截图后，或者本地图片后copy，然后直接按设置好的command+option+v，然后在图片成功上传到七牛云图床上，剪贴板上也有相应的连接。将博客同时部署到github和coding通常我们把hexo托管在github，但是毕竟github是国外的，访问速度上还是有点慢，所以想也部署一套在国内的托管平台，目前gitcafe已经被coding收购了，所以就决定部署到coding。但是coding有个不好的地方就是访问自定义域名的站点时，不充值的话会有广告跳转页，所以我现在也是处于观望的态度，先把coding的环境代码也先布置好，等它哪一天广告跳转页没了，就把域名指过去。coding上创建一个新项目这里只介绍coding上面如何创建项目，以及把本地hexo部署到coding上面同步本地hexo到coding上把获取到了ssh配置_config.yml文件中的deploy下，如果是第一次使用coding的话，需要设置SSH公钥，生成的方法可以参考coding帮助中心,其实和github配置一模一样的。本地打开 id_rsa.pub 文件，复制其中全部内容，填写到SSH_RSA公钥key下的一栏，公钥名称可以随意起名字。完成后点击“添加”，然后输入密码或动态码即可添加完成。添加后，在git bash命令输入：1ssh -T git@git.coding.net如果得到下面提示就表示公钥添加成功了：1Coding.net Tips : [Hello ! You've conected to Coding.net by SSH successfully! ]想要同时部署到2个平台，就要修改博客根目录下面的_config.yml文件中的deploy如下根据Hexo官方文档需要修改成下面的形式123456deploy: type: git message: [message] repo: github: &lt;repository url&gt;,[branch] gitcafe: &lt;repository url&gt;,[branch]所以我是这样的12345deploy:- type: git repo: github: https://github.com/MuYunyun/MuYunyun.github.io.git,master coding: git@git.coding.net:muyunyun/muyunyun.git,master最后使用部署命令就能把博客同步到coding上面：1hexo deploy -gpages服务方式部署将代码上传至coding之后我们就要开启pages服务了，在pages页面我们只需要将部署来源选择为master分支，然后将自定义域名填写我们自己购买的域名就可以了设置域名解析现在要实现国内的走coding，海外的走github，只要配置2个CNAME就行。域名解析如下：参考资料小胡子哥Hexo Next主题设置和优化Hexo 博客补丁Water Sister’s BlogHexo+NexT主题配置备忘Cherry’s BlogHexo 3.1.1 静态博客搭建指南hexo的next主题个性化教程:打造炫酷网站将hexo博客同时托管到github和coding]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
</search>